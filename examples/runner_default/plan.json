{
  "format_version": "0.1",
  "terraform_version": "0.12.9",
  "variables": {
    "bucket_name": {
      "value": "config-bucket-1c5a1978-d138-4084-a3b4-fd4c403a89a0"
    },
    "enable_gitlab_runner_ssh_access": {
      "value": "false"
    },
    "registration_token": {
      "value": "GBpeL612xfp3DtEjzZsx"
    }
  },
  "planned_values": {
    "root_module": {
      "child_modules": [
        {
          "resources": [
            {
              "address": "module.runner.aws_autoscaling_group.gitlab_runner_instance",
              "mode": "managed",
              "type": "aws_autoscaling_group",
              "name": "gitlab_runner_instance",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "desired_capacity": 1,
                "enabled_metrics": null,
                "force_delete": false,
                "health_check_grace_period": 0,
                "initial_lifecycle_hook": [],
                "launch_template": [],
                "max_size": 1,
                "metrics_granularity": "1Minute",
                "min_elb_capacity": null,
                "min_size": 1,
                "mixed_instances_policy": [],
                "name": "gitlab-runner-as-group",
                "name_prefix": null,
                "placement_group": null,
                "protect_from_scale_in": false,
                "suspended_processes": null,
                "tag": [],
                "tags": null,
                "termination_policies": null,
                "timeouts": null,
                "wait_for_capacity_timeout": "10m",
                "wait_for_elb_capacity": null
              }
            },
            {
              "address": "module.runner.aws_autoscaling_schedule.scale_in",
              "mode": "managed",
              "type": "aws_autoscaling_schedule",
              "name": "scale_in",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "autoscaling_group_name": "gitlab-runner-as-group",
                "desired_capacity": 0,
                "max_size": 0,
                "min_size": 0,
                "recurrence": "0 18 * * 1-5",
                "scheduled_action_name": "scale_in-gitlab-runner-as-group"
              }
            },
            {
              "address": "module.runner.aws_autoscaling_schedule.scale_out",
              "mode": "managed",
              "type": "aws_autoscaling_schedule",
              "name": "scale_out",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "autoscaling_group_name": "gitlab-runner-as-group",
                "desired_capacity": 1,
                "max_size": 1,
                "min_size": 1,
                "recurrence": "0 8 * * 1-5",
                "scheduled_action_name": "scale_out-gitlab-runner-as-group"
              }
            },
            {
              "address": "module.runner.aws_cloudwatch_log_group.environment",
              "mode": "managed",
              "type": "aws_cloudwatch_log_group",
              "name": "environment",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "kms_key_id": null,
                "name": "gitlab-runner-log-group",
                "name_prefix": null,
                "retention_in_days": 0,
                "tags": null
              }
            },
            {
              "address": "module.runner.aws_iam_instance_profile.docker_machine",
              "mode": "managed",
              "type": "aws_iam_instance_profile",
              "name": "docker_machine",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "name": "gitlab-runner-docker-machine-profile",
                "name_prefix": null,
                "path": "/",
                "role": "gitlab-runner-docker-machine-role"
              }
            },
            {
              "address": "module.runner.aws_iam_instance_profile.instance",
              "mode": "managed",
              "type": "aws_iam_instance_profile",
              "name": "instance",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "name": "gitlab-runner-instance-profile",
                "name_prefix": null,
                "path": "/",
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_policy.docker_machine_cache",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "docker_machine_cache",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "description": "Policy for docker machine instance to access cache",
                "name": "gitlab-runner-docker-machine-cache",
                "name_prefix": null,
                "path": "/"
              }
            },
            {
              "address": "module.runner.aws_iam_policy.instance_docker_machine_policy",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "instance_docker_machine_policy",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "description": "Policy for docker machine.",
                "name": "gitlab-runner-docker-machine",
                "name_prefix": null,
                "path": "/",
                "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": [\n          \"ec2:DescribeKeyPairs\",\n          \"ec2:TerminateInstances\",\n          \"ec2:StopInstances\",\n          \"ec2:StartInstances\",\n          \"ec2:RunInstances\",\n          \"ec2:RebootInstances\",\n          \"ec2:CreateKeyPair\",\n          \"ec2:DeleteKeyPair\",\n          \"ec2:ImportKeyPair\",\n          \"ec2:Describe*\",\n          \"ec2:CreateTags\",\n          \"ec2:RequestSpotInstances\",\n          \"ec2:CancelSpotInstanceRequests\",\n          \"ec2:DescribeSubnets\",\n          \"ec2:AssociateIamInstanceProfile\",\n          \"iam:PassRole\"\n        ],\n        \"Effect\": \"Allow\",\n        \"Resource\": \"*\"\n      }\n    ]\n  }\n"
              }
            },
            {
              "address": "module.runner.aws_iam_policy.instance_session_manager_policy",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "instance_session_manager_policy",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "description": "Policy session manager.",
                "name": "gitlab-runner-session-manager",
                "name_prefix": null,
                "path": "/",
                "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssmmessages:CreateControlChannel\",\n                \"ssmmessages:CreateDataChannel\",\n                \"ssmmessages:OpenControlChannel\",\n                \"ssmmessages:OpenDataChannel\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}"
              }
            },
            {
              "address": "module.runner.aws_iam_policy.service_linked_role",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "service_linked_role",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "description": "Policy for creation of service linked roles.",
                "name": "gitlab-runner-service_linked_role",
                "name_prefix": null,
                "path": "/",
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:CreateServiceLinkedRole\",\n      \"Resource\": \"arn:aws:iam::*:role/aws-service-role/*\"\n    }\n  ]\n}"
              }
            },
            {
              "address": "module.runner.aws_iam_policy.ssm",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "ssm",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "description": "Policy for runner token param access via SSM",
                "name": "gitlab-runner-ssm",
                "name_prefix": null,
                "path": "/",
                "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:PutParameter\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:GetParameters\"\n            ],\n            \"Resource\": \"arn:aws:ssm:*\"\n        }\n    ]\n}"
              }
            },
            {
              "address": "module.runner.aws_iam_role.docker_machine",
              "mode": "managed",
              "type": "aws_iam_role",
              "name": "docker_machine",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "assume_role_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
                "description": null,
                "force_detach_policies": false,
                "max_session_duration": 3600,
                "name": "gitlab-runner-docker-machine-role",
                "name_prefix": null,
                "path": "/",
                "permissions_boundary": null,
                "tags": null
              }
            },
            {
              "address": "module.runner.aws_iam_role.instance",
              "mode": "managed",
              "type": "aws_iam_role",
              "name": "instance",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "assume_role_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
                "description": null,
                "force_detach_policies": false,
                "max_session_duration": 3600,
                "name": "gitlab-runner-instance-role",
                "name_prefix": null,
                "path": "/",
                "permissions_boundary": null,
                "tags": null
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy.instance",
              "mode": "managed",
              "type": "aws_iam_role_policy",
              "name": "instance",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "name": "gitlab-runner-instance-role",
                "name_prefix": null,
                "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"allowLoggingToCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\"\n      ],\n      \"Resource\": [\n        \"arn:aws:logs:*:*:*\"\n      ]\n    }\n  ]\n}\n",
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy_attachment.docker_machine_cache_instance",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "docker_machine_cache_instance",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy_attachment.instance_docker_machine_policy",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "instance_docker_machine_policy",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy_attachment.instance_session_manager_aws_managed",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "instance_session_manager_aws_managed",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "policy_arn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy_attachment.instance_session_manager_policy",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "instance_session_manager_policy",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy_attachment.service_linked_role",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "service_linked_role",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_iam_role_policy_attachment.ssm",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "ssm",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "role": "gitlab-runner-instance-role"
              }
            },
            {
              "address": "module.runner.aws_launch_configuration.gitlab_runner_instance",
              "mode": "managed",
              "type": "aws_launch_configuration",
              "name": "gitlab_runner_instance",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "associate_public_ip_address": false,
                "enable_monitoring": true,
                "ephemeral_block_device": [],
                "iam_instance_profile": "gitlab-runner-instance-profile",
                "image_id": "ami-042710e2a62ecec92",
                "instance_type": "t3.micro",
                "key_name": "default",
                "name_prefix": null,
                "placement_tenancy": null,
                "root_block_device": [
                  {
                    "delete_on_termination": true,
                    "volume_size": 8,
                    "volume_type": "gp2"
                  }
                ],
                "spot_price": null,
                "user_data_base64": null,
                "vpc_classic_link_id": null,
                "vpc_classic_link_security_groups": null
              }
            },
            {
              "address": "module.runner.aws_s3_bucket.build_cache",
              "mode": "managed",
              "type": "aws_s3_bucket",
              "name": "build_cache",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "acl": "private",
                "bucket": "config-bucket-1c5a1978-d138-4084-a3b4-fd4c403a89a0",
                "bucket_prefix": null,
                "cors_rule": [],
                "force_destroy": true,
                "lifecycle_rule": [
                  {
                    "abort_incomplete_multipart_upload_days": null,
                    "enabled": true,
                    "expiration": [
                      {
                        "date": "",
                        "days": 1,
                        "expired_object_delete_marker": null
                      }
                    ],
                    "id": "clear",
                    "noncurrent_version_expiration": [
                      {
                        "days": 1
                      }
                    ],
                    "noncurrent_version_transition": [],
                    "prefix": "runner/",
                    "tags": null,
                    "transition": []
                  }
                ],
                "logging": [],
                "object_lock_configuration": [],
                "policy": null,
                "replication_configuration": [],
                "server_side_encryption_configuration": [
                  {
                    "rule": [
                      {
                        "apply_server_side_encryption_by_default": [
                          {
                            "kms_master_key_id": null,
                            "sse_algorithm": "AES256"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "tags": null,
                "website": []
              }
            },
            {
              "address": "module.runner.aws_security_group.docker_machine",
              "mode": "managed",
              "type": "aws_security_group",
              "name": "docker_machine",
              "provider_name": "aws",
              "schema_version": 1,
              "values": {
                "description": "Managed by Terraform",
                "name_prefix": "gitlab-runner-docker-machine",
                "revoke_rules_on_delete": false,
                "tags": null,
                "timeouts": null
              }
            },
            {
              "address": "module.runner.aws_security_group.runner",
              "mode": "managed",
              "type": "aws_security_group",
              "name": "runner",
              "provider_name": "aws",
              "schema_version": 1,
              "values": {
                "description": "Managed by Terraform",
                "egress": [
                  {
                    "cidr_blocks": [
                      "0.0.0.0/0"
                    ],
                    "description": "",
                    "from_port": 0,
                    "ipv6_cidr_blocks": [],
                    "prefix_list_ids": [],
                    "protocol": "-1",
                    "security_groups": [],
                    "self": false,
                    "to_port": 0
                  }
                ],
                "name_prefix": "gitlab-runner-security-group",
                "revoke_rules_on_delete": false,
                "tags": null,
                "timeouts": null
              }
            },
            {
              "address": "module.runner.aws_security_group_rule.docker_machine_docker_runner",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "docker_machine_docker_runner",
              "provider_name": "aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": null,
                "from_port": 2376,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": null,
                "protocol": "tcp",
                "self": false,
                "to_port": 2376,
                "type": "ingress"
              }
            },
            {
              "address": "module.runner.aws_security_group_rule.docker_machine_docker_self",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "docker_machine_docker_self",
              "provider_name": "aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": null,
                "description": null,
                "from_port": 2376,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": null,
                "protocol": "tcp",
                "self": true,
                "to_port": 2376,
                "type": "ingress"
              }
            },
            {
              "address": "module.runner.aws_security_group_rule.docker_machine_ssh",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "docker_machine_ssh",
              "provider_name": "aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": null,
                "from_port": 22,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": null,
                "protocol": "tcp",
                "self": false,
                "to_port": 22,
                "type": "ingress"
              }
            },
            {
              "address": "module.runner.aws_security_group_rule.out_all",
              "mode": "managed",
              "type": "aws_security_group_rule",
              "name": "out_all",
              "provider_name": "aws",
              "schema_version": 2,
              "values": {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": null,
                "from_port": 0,
                "ipv6_cidr_blocks": null,
                "prefix_list_ids": null,
                "protocol": "-1",
                "self": false,
                "to_port": 65535,
                "type": "egress"
              }
            },
            {
              "address": "module.runner.aws_ssm_parameter.runner_registration_token",
              "mode": "managed",
              "type": "aws_ssm_parameter",
              "name": "runner_registration_token",
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "allowed_pattern": null,
                "description": null,
                "name": "gitlab-runner-runner-token",
                "overwrite": null,
                "tags": null,
                "tier": "Standard",
                "type": "SecureString",
                "value": "null"
              }
            },
            {
              "address": "module.runner.data.template_file.docker_machine_cache_policy",
              "mode": "data",
              "type": "template_file",
              "name": "docker_machine_cache_policy",
              "provider_name": "template",
              "schema_version": 0,
              "values": {
                "filename": null,
                "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"allowGitLabRunnersAccessCache\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:GetObject\",\n        \"s3:GetObjectAcl\"\n      ],\n      \"Resource\": [\n        \"${s3_cache_arn}/*\"\n      ]\n    }\n  ]\n}\n",
                "vars": {}
              }
            },
            {
              "address": "module.runner.data.template_file.runners",
              "mode": "data",
              "type": "template_file",
              "name": "runners",
              "provider_name": "template",
              "schema_version": 0,
              "values": {
                "filename": null,
                "template": "concurrent = ${runners_concurrent}\ncheck_interval = 0\n\n[[runners]]\n  name = \"${runners_name}\"\n  url = \"${gitlab_url}\"\n  token = \"__TO_BE_REPLACED_BY_USER_DATA__\"\n  executor = \"docker+machine\"\n  environment = ${runners_environment_vars}\n  request_concurrency = ${runners_request_concurrency}\n  output_limit = ${runners_output_limit}\n  limit = ${runners_limit}\n  [runners.docker]\n    tls_verify = false\n    image = \"${runners_image}\"\n    privileged = ${runners_privileged}\n    disable_cache = false\n    shm_size = ${runners_shm_size}\n    pull_policy = \"${runners_pull_policy}\"\n  [runners.cache]\n    Type = \"s3\"\n    Shared = false\n    [runners.cache.s3]\n      ServerAddress = \"s3.amazonaws.com\"\n      BucketName = \"${bucket_name}\"\n      BucketLocation = \"${aws_region}\"\n      Insecure = false\n  [runners.machine]\n    IdleCount = ${runners_idle_count}\n    IdleTime = ${runners_idle_time}\n%{ if runners_max_builds != 0 ~}\n    MaxBuilds = ${runners_max_builds}\n%{ endif ~}\n    MachineDriver = \"amazonec2\"\n    MachineName = \"runner-%s\"\n    MachineOptions = [\n      \"amazonec2-instance-type=${runners_instance_type}\",\n      \"amazonec2-region=${aws_region}\",\n      \"amazonec2-zone=${runners_aws_zone}\",\n      \"amazonec2-vpc-id=${runners_vpc_id}\",\n      \"amazonec2-subnet-id=${runners_subnet_id}\",\n      \"amazonec2-private-address-only=true\",\n      \"amazonec2-request-spot-instance=true\",\n      \"amazonec2-spot-price=${runners_spot_price_bid}\",\n      \"amazonec2-security-group=${runners_security_group_name}\",\n      \"amazonec2-monitoring=${runners_monitoring}\",\n      \"amazonec2-iam-instance-profile=${runners_instance_profile},\n      \"amazonec2-root-size=${runners_root_size}\",\n      \"amazonec2-ami=${runners_ami}\"\n    ]\n    OffPeakTimezone = \"${runners_off_peak_timezone}\"\n    OffPeakIdleCount = ${runners_off_peak_idle_count}\n    OffPeakIdleTime = ${runners_off_peak_idle_time}\n%{ if runners_off_peak_periods != \"\" ~}\n    OffPeakPeriods = ${runners_off_peak_periods}\n%{ endif ~}\n",
                "vars": {
                  "aws_region": "ap-southeast-2",
                  "bucket_name": "config-bucket-1c5a1978-d138-4084-a3b4-fd4c403a89a0",
                  "gitlab_url": "https://gitlab.com",
                  "runners_ami": "ami-0328aad0f6218c429",
                  "runners_aws_zone": "a",
                  "runners_concurrent": "10",
                  "runners_environment_vars": "[]",
                  "runners_idle_count": "0",
                  "runners_idle_time": "600",
                  "runners_image": "docker:18.03.1-ce",
                  "runners_instance_profile": "gitlab-runner-docker-machine-profile",
                  "runners_instance_type": "m5a.large",
                  "runners_limit": "0",
                  "runners_max_builds": "0",
                  "runners_monitoring": "false",
                  "runners_name": "test-runner",
                  "runners_off_peak_idle_count": "0",
                  "runners_off_peak_idle_time": "60",
                  "runners_off_peak_periods": "[\"* * 0-9,17-23 * * mon-fri *\", \"* * * * * sat,sun *\"]",
                  "runners_off_peak_timezone": "Australia/Sydney",
                  "runners_output_limit": "4096",
                  "runners_privileged": "true",
                  "runners_pull_policy": "always",
                  "runners_request_concurrency": "1",
                  "runners_root_size": "16",
                  "runners_shm_size": "0",
                  "runners_spot_price_bid": "0.06"
                }
              }
            },
            {
              "address": "module.runner.data.template_file.user_data",
              "mode": "data",
              "type": "template_file",
              "name": "user_data",
              "provider_name": "template",
              "schema_version": 0,
              "values": {
                "filename": null,
                "template": "#!/bin/bash -e\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n\nif [[ `echo ${user_data_trace_log}` == false ]] \nthen\n  set -x\nfi\n\n# Add current hostname to hosts file\ntee /etc/hosts <<EOL\n127.0.0.1   localhost localhost.localdomain `hostname`\nEOL\n\nfor i in {1..7}\ndo\n  echo \"Attempt: ---- \" $i\n  yum -y update  && break || sleep 60\ndone\n\necho 'installing additional software for logging'\n# installing in a loop to ensure the cli is installed.\nfor i in {1..7}\ndo\n  echo \"Attempt: ---- \" $i\n  yum install -y aws-cli awslogs jq && break || sleep 60\ndone\n\n# Inject the CloudWatch Logs configuration file contents\ncat > /etc/awslogs/awslogs.conf <<- EOF\n[general]\nstate_file = /var/lib/awslogs/agent-state\n\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_stream_name = {instanceId}/dmesg\nlog_group_name = gitlab-runner-log-group\ninitial_position = start_of_file\n\n[/var/log/messages]\nfile = /var/log/messages\nlog_stream_name = {instanceId}/messages\nlog_group_name = gitlab-runner-log-group\ndatetime_format = %b %d %H:%M:%S\ninitial_position = start_of_file\n\n[/var/log/user-data.log]\nfile = /var/log/user-data.log\nlog_stream_name = {instanceId}/user-data\nlog_group_name = gitlab-runner-log-group\ninitial_position = start_of_file\nEOF\n\n# Set the region to send CloudWatch Logs data to (the region where the instance is located)\nregion=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)\nsed -i -e \"s/region = us-east-1/region = $region/g\" /etc/awslogs/awscli.conf\n\n# Replace instance id.\ninstanceId=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .instanceId)\nsed -i -e \"s/{instanceId}/$instanceId/g\" /etc/awslogs/awslogs.conf\n\nservice awslogs start\nchkconfig awslogs on\n\nmkdir -p /etc/gitlab-runner\ncat > /etc/gitlab-runner/config.toml <<- EOF\n${runners_config}\nEOF\n\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | bash\nyum install gitlab-runner-${gitlab_runner_version} -y\ncurl  --fail --retry 6 -L https://github.com/docker/machine/releases/download/v${docker_machine_version}/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine && \\\n  chmod +x /tmp/docker-machine && \\\n  cp /tmp/docker-machine /usr/local/bin/docker-machine && \\\n  ln -s /usr/local/bin/docker-machine /usr/bin/docker-machine\n\n# Create a dummy machine so that the cert is generated properly\n# See: https://gitlab.com/gitlab-org/gitlab-runner/issues/3676\ndocker-machine create --driver none --url localhost dummy-machine\n\n# Install jq if not exists\nif ! [ -x \"$(command -v jq)\" ]; then\n  yum install jq -y\nfi\n\ntoken=$(aws ssm get-parameters --names \"${runners_ssm_token_key}\" --with-decryption --region \"${ssm_region}\" | jq -r \".Parameters | .[0] | .Value\")\nif [[ `echo $token` == \"null\" ]]\nthen\n  token=$(curl --request POST -L \"${runners_gitlab_url}/api/v4/runners\" \\\n    --form \"token=${gitlab_runner_registration_token}\" \\\n    --form \"description=${giltab_runner_description}\" \\\n    --form \"locked=${gitlab_runner_locked_to_project}\" \\\n    --form \"run_untagged=${gitlab_runner_run_untagged}\" \\\n    --form \"maximum_timeout=${gitlab_runner_maximum_timeout}\" \\\n    --form \"access_level=${gitlab_runner_access_level}\" \\\n    | jq -r .token)\n  aws ssm put-parameter --overwrite --type SecureString --name \"${runners_ssm_token_key}\" --value $token --region \"${ssm_region}\"\nfi\n\nsed -i.bak s/__TO_BE_REPLACED_BY_USER_DATA__/`echo $token`/g /etc/gitlab-runner/config.toml\n\nservice gitlab-runner restart\nchkconfig gitlab-runner on\n\n# vim: set ft=sh:\n",
                "vars": {
                  "docker_machine_version": "0.16.2",
                  "giltab_runner_description": "runner default - auto",
                  "gitlab_runner_access_level": "not_protected",
                  "gitlab_runner_locked_to_project": "true",
                  "gitlab_runner_maximum_timeout": "3600",
                  "gitlab_runner_registration_token": "GBpeL612xfp3DtEjzZsx",
                  "gitlab_runner_run_untagged": "false",
                  "gitlab_runner_version": "12.3.0",
                  "runners_gitlab_url": "https://gitlab.com",
                  "runners_ssm_token_key": "gitlab-runner-runner-token",
                  "ssm_region": "ap-southeast-2",
                  "user_data_trace_log": "false"
                }
              }
            }
          ],
          "address": "module.runner"
        },
        {
          "resources": [
            {
              "address": "module.vpc.aws_eip.nat[0]",
              "mode": "managed",
              "type": "aws_eip",
              "name": "nat",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "associate_with_private_ip": null,
                "tags": {
                  "Name": "vpc-gitlab-runner-ap-southeast-2a"
                },
                "timeouts": null,
                "vpc": true
              }
            },
            {
              "address": "module.vpc.aws_internet_gateway.this[0]",
              "mode": "managed",
              "type": "aws_internet_gateway",
              "name": "this",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "tags": {
                  "Name": "vpc-gitlab-runner"
                }
              }
            },
            {
              "address": "module.vpc.aws_nat_gateway.this[0]",
              "mode": "managed",
              "type": "aws_nat_gateway",
              "name": "this",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "tags": {
                  "Name": "vpc-gitlab-runner-ap-southeast-2a"
                }
              }
            },
            {
              "address": "module.vpc.aws_route.private_nat_gateway[0]",
              "mode": "managed",
              "type": "aws_route",
              "name": "private_nat_gateway",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "destination_cidr_block": "0.0.0.0/0",
                "destination_ipv6_cidr_block": null,
                "timeouts": {
                  "create": "5m",
                  "delete": null
                },
                "transit_gateway_id": null,
                "vpc_peering_connection_id": null
              }
            },
            {
              "address": "module.vpc.aws_route.public_internet_gateway[0]",
              "mode": "managed",
              "type": "aws_route",
              "name": "public_internet_gateway",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "destination_cidr_block": "0.0.0.0/0",
                "destination_ipv6_cidr_block": null,
                "timeouts": {
                  "create": "5m",
                  "delete": null
                },
                "transit_gateway_id": null,
                "vpc_peering_connection_id": null
              }
            },
            {
              "address": "module.vpc.aws_route_table.private[0]",
              "mode": "managed",
              "type": "aws_route_table",
              "name": "private",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "tags": {
                  "Name": "vpc-gitlab-runner-private"
                }
              }
            },
            {
              "address": "module.vpc.aws_route_table.public[0]",
              "mode": "managed",
              "type": "aws_route_table",
              "name": "public",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "tags": {
                  "Name": "vpc-gitlab-runner-public"
                }
              }
            },
            {
              "address": "module.vpc.aws_route_table_association.private[0]",
              "mode": "managed",
              "type": "aws_route_table_association",
              "name": "private",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0
            },
            {
              "address": "module.vpc.aws_route_table_association.public[0]",
              "mode": "managed",
              "type": "aws_route_table_association",
              "name": "public",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0
            },
            {
              "address": "module.vpc.aws_subnet.private[0]",
              "mode": "managed",
              "type": "aws_subnet",
              "name": "private",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 1,
              "values": {
                "assign_ipv6_address_on_creation": false,
                "availability_zone": "ap-southeast-2a",
                "cidr_block": "10.0.1.0/24",
                "map_public_ip_on_launch": false,
                "tags": {
                  "Name": "vpc-gitlab-runner-private-ap-southeast-2a"
                },
                "timeouts": null
              }
            },
            {
              "address": "module.vpc.aws_subnet.public[0]",
              "mode": "managed",
              "type": "aws_subnet",
              "name": "public",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 1,
              "values": {
                "assign_ipv6_address_on_creation": false,
                "availability_zone": "ap-southeast-2a",
                "cidr_block": "10.0.101.0/24",
                "map_public_ip_on_launch": true,
                "tags": {
                  "Name": "vpc-gitlab-runner-public-ap-southeast-2a"
                },
                "timeouts": null
              }
            },
            {
              "address": "module.vpc.aws_vpc.this[0]",
              "mode": "managed",
              "type": "aws_vpc",
              "name": "this",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 1,
              "values": {
                "assign_generated_ipv6_cidr_block": false,
                "cidr_block": "10.0.0.0/16",
                "enable_dns_hostnames": false,
                "enable_dns_support": true,
                "instance_tenancy": "default",
                "tags": {
                  "Name": "vpc-gitlab-runner"
                }
              }
            },
            {
              "address": "module.vpc.aws_vpc_endpoint.s3[0]",
              "mode": "managed",
              "type": "aws_vpc_endpoint",
              "name": "s3",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0,
              "values": {
                "auto_accept": null,
                "private_dns_enabled": false,
                "service_name": "com.amazonaws.ap-southeast-2.s3",
                "tags": null,
                "timeouts": null,
                "vpc_endpoint_type": "Gateway"
              }
            },
            {
              "address": "module.vpc.aws_vpc_endpoint_route_table_association.private_s3[0]",
              "mode": "managed",
              "type": "aws_vpc_endpoint_route_table_association",
              "name": "private_s3",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0
            },
            {
              "address": "module.vpc.aws_vpc_endpoint_route_table_association.public_s3[0]",
              "mode": "managed",
              "type": "aws_vpc_endpoint_route_table_association",
              "name": "public_s3",
              "index": 0,
              "provider_name": "aws",
              "schema_version": 0
            }
          ],
          "address": "module.vpc"
        }
      ]
    }
  },
  "resource_changes": [
    {
      "address": "module.runner.aws_autoscaling_group.gitlab_runner_instance",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_autoscaling_group",
      "name": "gitlab_runner_instance",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "desired_capacity": 1,
          "enabled_metrics": null,
          "force_delete": false,
          "health_check_grace_period": 0,
          "initial_lifecycle_hook": [],
          "launch_template": [],
          "max_size": 1,
          "metrics_granularity": "1Minute",
          "min_elb_capacity": null,
          "min_size": 1,
          "mixed_instances_policy": [],
          "name": "gitlab-runner-as-group",
          "name_prefix": null,
          "placement_group": null,
          "protect_from_scale_in": false,
          "suspended_processes": null,
          "tag": [],
          "tags": null,
          "termination_policies": null,
          "timeouts": null,
          "wait_for_capacity_timeout": "10m",
          "wait_for_elb_capacity": null
        },
        "after_unknown": {
          "arn": true,
          "availability_zones": true,
          "default_cooldown": true,
          "health_check_type": true,
          "id": true,
          "initial_lifecycle_hook": [],
          "launch_configuration": true,
          "launch_template": [],
          "load_balancers": true,
          "mixed_instances_policy": [],
          "service_linked_role_arn": true,
          "tag": [],
          "target_group_arns": true,
          "vpc_zone_identifier": true
        }
      }
    },
    {
      "address": "module.runner.aws_autoscaling_schedule.scale_in",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_autoscaling_schedule",
      "name": "scale_in",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "autoscaling_group_name": "gitlab-runner-as-group",
          "desired_capacity": 0,
          "max_size": 0,
          "min_size": 0,
          "recurrence": "0 18 * * 1-5",
          "scheduled_action_name": "scale_in-gitlab-runner-as-group"
        },
        "after_unknown": {
          "arn": true,
          "end_time": true,
          "id": true,
          "start_time": true
        }
      }
    },
    {
      "address": "module.runner.aws_autoscaling_schedule.scale_out",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_autoscaling_schedule",
      "name": "scale_out",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "autoscaling_group_name": "gitlab-runner-as-group",
          "desired_capacity": 1,
          "max_size": 1,
          "min_size": 1,
          "recurrence": "0 8 * * 1-5",
          "scheduled_action_name": "scale_out-gitlab-runner-as-group"
        },
        "after_unknown": {
          "arn": true,
          "end_time": true,
          "id": true,
          "start_time": true
        }
      }
    },
    {
      "address": "module.runner.aws_cloudwatch_log_group.environment",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "environment",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "kms_key_id": null,
          "name": "gitlab-runner-log-group",
          "name_prefix": null,
          "retention_in_days": 0,
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_instance_profile.docker_machine",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "docker_machine",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "name": "gitlab-runner-docker-machine-profile",
          "name_prefix": null,
          "path": "/",
          "role": "gitlab-runner-docker-machine-role"
        },
        "after_unknown": {
          "arn": true,
          "create_date": true,
          "id": true,
          "roles": true,
          "unique_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_instance_profile.instance",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "instance",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "name": "gitlab-runner-instance-profile",
          "name_prefix": null,
          "path": "/",
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "arn": true,
          "create_date": true,
          "id": true,
          "roles": true,
          "unique_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_policy.docker_machine_cache",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "docker_machine_cache",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Policy for docker machine instance to access cache",
          "name": "gitlab-runner-docker-machine-cache",
          "name_prefix": null,
          "path": "/"
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "policy": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_policy.instance_docker_machine_policy",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "instance_docker_machine_policy",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Policy for docker machine.",
          "name": "gitlab-runner-docker-machine",
          "name_prefix": null,
          "path": "/",
          "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": [\n          \"ec2:DescribeKeyPairs\",\n          \"ec2:TerminateInstances\",\n          \"ec2:StopInstances\",\n          \"ec2:StartInstances\",\n          \"ec2:RunInstances\",\n          \"ec2:RebootInstances\",\n          \"ec2:CreateKeyPair\",\n          \"ec2:DeleteKeyPair\",\n          \"ec2:ImportKeyPair\",\n          \"ec2:Describe*\",\n          \"ec2:CreateTags\",\n          \"ec2:RequestSpotInstances\",\n          \"ec2:CancelSpotInstanceRequests\",\n          \"ec2:DescribeSubnets\",\n          \"ec2:AssociateIamInstanceProfile\",\n          \"iam:PassRole\"\n        ],\n        \"Effect\": \"Allow\",\n        \"Resource\": \"*\"\n      }\n    ]\n  }\n"
        },
        "after_unknown": {
          "arn": true,
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_policy.instance_session_manager_policy",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "instance_session_manager_policy",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Policy session manager.",
          "name": "gitlab-runner-session-manager",
          "name_prefix": null,
          "path": "/",
          "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssmmessages:CreateControlChannel\",\n                \"ssmmessages:CreateDataChannel\",\n                \"ssmmessages:OpenControlChannel\",\n                \"ssmmessages:OpenDataChannel\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}"
        },
        "after_unknown": {
          "arn": true,
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_policy.service_linked_role",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "service_linked_role",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Policy for creation of service linked roles.",
          "name": "gitlab-runner-service_linked_role",
          "name_prefix": null,
          "path": "/",
          "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:CreateServiceLinkedRole\",\n      \"Resource\": \"arn:aws:iam::*:role/aws-service-role/*\"\n    }\n  ]\n}"
        },
        "after_unknown": {
          "arn": true,
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_policy.ssm",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "ssm",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Policy for runner token param access via SSM",
          "name": "gitlab-runner-ssm",
          "name_prefix": null,
          "path": "/",
          "policy": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:PutParameter\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:GetParameters\"\n            ],\n            \"Resource\": \"arn:aws:ssm:*\"\n        }\n    ]\n}"
        },
        "after_unknown": {
          "arn": true,
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role.docker_machine",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "docker_machine",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assume_role_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
          "description": null,
          "force_detach_policies": false,
          "max_session_duration": 3600,
          "name": "gitlab-runner-docker-machine-role",
          "name_prefix": null,
          "path": "/",
          "permissions_boundary": null,
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "create_date": true,
          "id": true,
          "unique_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role.instance",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "instance",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assume_role_policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
          "description": null,
          "force_detach_policies": false,
          "max_session_duration": 3600,
          "name": "gitlab-runner-instance-role",
          "name_prefix": null,
          "path": "/",
          "permissions_boundary": null,
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "create_date": true,
          "id": true,
          "unique_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy.instance",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "instance",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "name": "gitlab-runner-instance-role",
          "name_prefix": null,
          "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"allowLoggingToCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\"\n      ],\n      \"Resource\": [\n        \"arn:aws:logs:*:*:*\"\n      ]\n    }\n  ]\n}\n",
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy_attachment.docker_machine_cache_instance",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "docker_machine_cache_instance",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true,
          "policy_arn": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy_attachment.instance_docker_machine_policy",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "instance_docker_machine_policy",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true,
          "policy_arn": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy_attachment.instance_session_manager_aws_managed",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "instance_session_manager_aws_managed",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "policy_arn": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy_attachment.instance_session_manager_policy",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "instance_session_manager_policy",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true,
          "policy_arn": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy_attachment.service_linked_role",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "service_linked_role",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true,
          "policy_arn": true
        }
      }
    },
    {
      "address": "module.runner.aws_iam_role_policy_attachment.ssm",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "ssm",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "role": "gitlab-runner-instance-role"
        },
        "after_unknown": {
          "id": true,
          "policy_arn": true
        }
      }
    },
    {
      "address": "module.runner.aws_launch_configuration.gitlab_runner_instance",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_launch_configuration",
      "name": "gitlab_runner_instance",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "associate_public_ip_address": false,
          "enable_monitoring": true,
          "ephemeral_block_device": [],
          "iam_instance_profile": "gitlab-runner-instance-profile",
          "image_id": "ami-042710e2a62ecec92",
          "instance_type": "t3.micro",
          "key_name": "default",
          "name_prefix": null,
          "placement_tenancy": null,
          "root_block_device": [
            {
              "delete_on_termination": true,
              "volume_size": 8,
              "volume_type": "gp2"
            }
          ],
          "spot_price": null,
          "user_data_base64": null,
          "vpc_classic_link_id": null,
          "vpc_classic_link_security_groups": null
        },
        "after_unknown": {
          "ebs_block_device": true,
          "ebs_optimized": true,
          "ephemeral_block_device": [],
          "id": true,
          "name": true,
          "root_block_device": [
            {
              "encrypted": true,
              "iops": true
            }
          ],
          "security_groups": true,
          "user_data": true
        }
      }
    },
    {
      "address": "module.runner.aws_s3_bucket.build_cache",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "build_cache",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "acl": "private",
          "bucket": "config-bucket-1c5a1978-d138-4084-a3b4-fd4c403a89a0",
          "bucket_prefix": null,
          "cors_rule": [],
          "force_destroy": true,
          "lifecycle_rule": [
            {
              "abort_incomplete_multipart_upload_days": null,
              "enabled": true,
              "expiration": [
                {
                  "date": "",
                  "days": 1,
                  "expired_object_delete_marker": null
                }
              ],
              "id": "clear",
              "noncurrent_version_expiration": [
                {
                  "days": 1
                }
              ],
              "noncurrent_version_transition": [],
              "prefix": "runner/",
              "tags": null,
              "transition": []
            }
          ],
          "logging": [],
          "object_lock_configuration": [],
          "policy": null,
          "replication_configuration": [],
          "server_side_encryption_configuration": [
            {
              "rule": [
                {
                  "apply_server_side_encryption_by_default": [
                    {
                      "kms_master_key_id": null,
                      "sse_algorithm": "AES256"
                    }
                  ]
                }
              ]
            }
          ],
          "tags": null,
          "website": []
        },
        "after_unknown": {
          "acceleration_status": true,
          "arn": true,
          "bucket_domain_name": true,
          "bucket_regional_domain_name": true,
          "cors_rule": [],
          "hosted_zone_id": true,
          "id": true,
          "lifecycle_rule": [
            {
              "expiration": [
                {}
              ],
              "noncurrent_version_expiration": [
                {}
              ],
              "noncurrent_version_transition": [],
              "transition": []
            }
          ],
          "logging": [],
          "object_lock_configuration": [],
          "region": true,
          "replication_configuration": [],
          "request_payer": true,
          "server_side_encryption_configuration": [
            {
              "rule": [
                {
                  "apply_server_side_encryption_by_default": [
                    {}
                  ]
                }
              ]
            }
          ],
          "versioning": true,
          "website": [],
          "website_domain": true,
          "website_endpoint": true
        }
      }
    },
    {
      "address": "module.runner.aws_security_group.docker_machine",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "docker_machine",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Managed by Terraform",
          "name_prefix": "gitlab-runner-docker-machine",
          "revoke_rules_on_delete": false,
          "tags": null,
          "timeouts": null
        },
        "after_unknown": {
          "arn": true,
          "egress": true,
          "id": true,
          "ingress": true,
          "name": true,
          "owner_id": true,
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_security_group.runner",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "runner",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "description": "Managed by Terraform",
          "egress": [
            {
              "cidr_blocks": [
                "0.0.0.0/0"
              ],
              "description": "",
              "from_port": 0,
              "ipv6_cidr_blocks": [],
              "prefix_list_ids": [],
              "protocol": "-1",
              "security_groups": [],
              "self": false,
              "to_port": 0
            }
          ],
          "name_prefix": "gitlab-runner-security-group",
          "revoke_rules_on_delete": false,
          "tags": null,
          "timeouts": null
        },
        "after_unknown": {
          "arn": true,
          "egress": [
            {
              "cidr_blocks": [
                false
              ],
              "ipv6_cidr_blocks": [],
              "prefix_list_ids": [],
              "security_groups": []
            }
          ],
          "id": true,
          "ingress": true,
          "name": true,
          "owner_id": true,
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_security_group_rule.docker_machine_docker_runner",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "docker_machine_docker_runner",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": null,
          "from_port": 2376,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": null,
          "protocol": "tcp",
          "self": false,
          "to_port": 2376,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "security_group_id": true,
          "source_security_group_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_security_group_rule.docker_machine_docker_self",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "docker_machine_docker_self",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": null,
          "description": null,
          "from_port": 2376,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": null,
          "protocol": "tcp",
          "self": true,
          "to_port": 2376,
          "type": "ingress"
        },
        "after_unknown": {
          "id": true,
          "security_group_id": true,
          "source_security_group_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_security_group_rule.docker_machine_ssh",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "docker_machine_ssh",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": [
            "0.0.0.0/0"
          ],
          "description": null,
          "from_port": 22,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": null,
          "protocol": "tcp",
          "self": false,
          "to_port": 22,
          "type": "ingress"
        },
        "after_unknown": {
          "cidr_blocks": [
            false
          ],
          "id": true,
          "security_group_id": true,
          "source_security_group_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_security_group_rule.out_all",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "out_all",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "cidr_blocks": [
            "0.0.0.0/0"
          ],
          "description": null,
          "from_port": 0,
          "ipv6_cidr_blocks": null,
          "prefix_list_ids": null,
          "protocol": "-1",
          "self": false,
          "to_port": 65535,
          "type": "egress"
        },
        "after_unknown": {
          "cidr_blocks": [
            false
          ],
          "id": true,
          "security_group_id": true,
          "source_security_group_id": true
        }
      }
    },
    {
      "address": "module.runner.aws_ssm_parameter.runner_registration_token",
      "module_address": "module.runner",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "runner_registration_token",
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "allowed_pattern": null,
          "description": null,
          "name": "gitlab-runner-runner-token",
          "overwrite": null,
          "tags": null,
          "tier": "Standard",
          "type": "SecureString",
          "value": "null"
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "key_id": true,
          "version": true
        }
      }
    },
    {
      "address": "module.runner.data.template_file.docker_machine_cache_policy",
      "module_address": "module.runner",
      "mode": "data",
      "type": "template_file",
      "name": "docker_machine_cache_policy",
      "provider_name": "template",
      "change": {
        "actions": [
          "read"
        ],
        "before": null,
        "after": {
          "filename": null,
          "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"allowGitLabRunnersAccessCache\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n        \"s3:GetObject\",\n        \"s3:GetObjectAcl\"\n      ],\n      \"Resource\": [\n        \"${s3_cache_arn}/*\"\n      ]\n    }\n  ]\n}\n",
          "vars": {}
        },
        "after_unknown": {
          "id": true,
          "rendered": true,
          "vars": {
            "s3_cache_arn": true
          }
        }
      }
    },
    {
      "address": "module.runner.data.template_file.runners",
      "module_address": "module.runner",
      "mode": "data",
      "type": "template_file",
      "name": "runners",
      "provider_name": "template",
      "change": {
        "actions": [
          "read"
        ],
        "before": null,
        "after": {
          "filename": null,
          "template": "concurrent = ${runners_concurrent}\ncheck_interval = 0\n\n[[runners]]\n  name = \"${runners_name}\"\n  url = \"${gitlab_url}\"\n  token = \"__TO_BE_REPLACED_BY_USER_DATA__\"\n  executor = \"docker+machine\"\n  environment = ${runners_environment_vars}\n  request_concurrency = ${runners_request_concurrency}\n  output_limit = ${runners_output_limit}\n  limit = ${runners_limit}\n  [runners.docker]\n    tls_verify = false\n    image = \"${runners_image}\"\n    privileged = ${runners_privileged}\n    disable_cache = false\n    shm_size = ${runners_shm_size}\n    pull_policy = \"${runners_pull_policy}\"\n  [runners.cache]\n    Type = \"s3\"\n    Shared = false\n    [runners.cache.s3]\n      ServerAddress = \"s3.amazonaws.com\"\n      BucketName = \"${bucket_name}\"\n      BucketLocation = \"${aws_region}\"\n      Insecure = false\n  [runners.machine]\n    IdleCount = ${runners_idle_count}\n    IdleTime = ${runners_idle_time}\n%{ if runners_max_builds != 0 ~}\n    MaxBuilds = ${runners_max_builds}\n%{ endif ~}\n    MachineDriver = \"amazonec2\"\n    MachineName = \"runner-%s\"\n    MachineOptions = [\n      \"amazonec2-instance-type=${runners_instance_type}\",\n      \"amazonec2-region=${aws_region}\",\n      \"amazonec2-zone=${runners_aws_zone}\",\n      \"amazonec2-vpc-id=${runners_vpc_id}\",\n      \"amazonec2-subnet-id=${runners_subnet_id}\",\n      \"amazonec2-private-address-only=true\",\n      \"amazonec2-request-spot-instance=true\",\n      \"amazonec2-spot-price=${runners_spot_price_bid}\",\n      \"amazonec2-security-group=${runners_security_group_name}\",\n      \"amazonec2-monitoring=${runners_monitoring}\",\n      \"amazonec2-iam-instance-profile=${runners_instance_profile},\n      \"amazonec2-root-size=${runners_root_size}\",\n      \"amazonec2-ami=${runners_ami}\"\n    ]\n    OffPeakTimezone = \"${runners_off_peak_timezone}\"\n    OffPeakIdleCount = ${runners_off_peak_idle_count}\n    OffPeakIdleTime = ${runners_off_peak_idle_time}\n%{ if runners_off_peak_periods != \"\" ~}\n    OffPeakPeriods = ${runners_off_peak_periods}\n%{ endif ~}\n",
          "vars": {
            "aws_region": "ap-southeast-2",
            "bucket_name": "config-bucket-1c5a1978-d138-4084-a3b4-fd4c403a89a0",
            "gitlab_url": "https://gitlab.com",
            "runners_ami": "ami-0328aad0f6218c429",
            "runners_aws_zone": "a",
            "runners_concurrent": "10",
            "runners_environment_vars": "[]",
            "runners_idle_count": "0",
            "runners_idle_time": "600",
            "runners_image": "docker:18.03.1-ce",
            "runners_instance_profile": "gitlab-runner-docker-machine-profile",
            "runners_instance_type": "m5a.large",
            "runners_limit": "0",
            "runners_max_builds": "0",
            "runners_monitoring": "false",
            "runners_name": "test-runner",
            "runners_off_peak_idle_count": "0",
            "runners_off_peak_idle_time": "60",
            "runners_off_peak_periods": "[\"* * 0-9,17-23 * * mon-fri *\", \"* * * * * sat,sun *\"]",
            "runners_off_peak_timezone": "Australia/Sydney",
            "runners_output_limit": "4096",
            "runners_privileged": "true",
            "runners_pull_policy": "always",
            "runners_request_concurrency": "1",
            "runners_root_size": "16",
            "runners_shm_size": "0",
            "runners_spot_price_bid": "0.06"
          }
        },
        "after_unknown": {
          "id": true,
          "rendered": true,
          "vars": {
            "runners_security_group_name": true,
            "runners_subnet_id": true,
            "runners_vpc_id": true
          }
        }
      }
    },
    {
      "address": "module.runner.data.template_file.user_data",
      "module_address": "module.runner",
      "mode": "data",
      "type": "template_file",
      "name": "user_data",
      "provider_name": "template",
      "change": {
        "actions": [
          "read"
        ],
        "before": null,
        "after": {
          "filename": null,
          "template": "#!/bin/bash -e\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n\nif [[ `echo ${user_data_trace_log}` == false ]] \nthen\n  set -x\nfi\n\n# Add current hostname to hosts file\ntee /etc/hosts <<EOL\n127.0.0.1   localhost localhost.localdomain `hostname`\nEOL\n\nfor i in {1..7}\ndo\n  echo \"Attempt: ---- \" $i\n  yum -y update  && break || sleep 60\ndone\n\necho 'installing additional software for logging'\n# installing in a loop to ensure the cli is installed.\nfor i in {1..7}\ndo\n  echo \"Attempt: ---- \" $i\n  yum install -y aws-cli awslogs jq && break || sleep 60\ndone\n\n# Inject the CloudWatch Logs configuration file contents\ncat > /etc/awslogs/awslogs.conf <<- EOF\n[general]\nstate_file = /var/lib/awslogs/agent-state\n\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_stream_name = {instanceId}/dmesg\nlog_group_name = gitlab-runner-log-group\ninitial_position = start_of_file\n\n[/var/log/messages]\nfile = /var/log/messages\nlog_stream_name = {instanceId}/messages\nlog_group_name = gitlab-runner-log-group\ndatetime_format = %b %d %H:%M:%S\ninitial_position = start_of_file\n\n[/var/log/user-data.log]\nfile = /var/log/user-data.log\nlog_stream_name = {instanceId}/user-data\nlog_group_name = gitlab-runner-log-group\ninitial_position = start_of_file\nEOF\n\n# Set the region to send CloudWatch Logs data to (the region where the instance is located)\nregion=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)\nsed -i -e \"s/region = us-east-1/region = $region/g\" /etc/awslogs/awscli.conf\n\n# Replace instance id.\ninstanceId=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .instanceId)\nsed -i -e \"s/{instanceId}/$instanceId/g\" /etc/awslogs/awslogs.conf\n\nservice awslogs start\nchkconfig awslogs on\n\nmkdir -p /etc/gitlab-runner\ncat > /etc/gitlab-runner/config.toml <<- EOF\n${runners_config}\nEOF\n\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | bash\nyum install gitlab-runner-${gitlab_runner_version} -y\ncurl  --fail --retry 6 -L https://github.com/docker/machine/releases/download/v${docker_machine_version}/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine && \\\n  chmod +x /tmp/docker-machine && \\\n  cp /tmp/docker-machine /usr/local/bin/docker-machine && \\\n  ln -s /usr/local/bin/docker-machine /usr/bin/docker-machine\n\n# Create a dummy machine so that the cert is generated properly\n# See: https://gitlab.com/gitlab-org/gitlab-runner/issues/3676\ndocker-machine create --driver none --url localhost dummy-machine\n\n# Install jq if not exists\nif ! [ -x \"$(command -v jq)\" ]; then\n  yum install jq -y\nfi\n\ntoken=$(aws ssm get-parameters --names \"${runners_ssm_token_key}\" --with-decryption --region \"${ssm_region}\" | jq -r \".Parameters | .[0] | .Value\")\nif [[ `echo $token` == \"null\" ]]\nthen\n  token=$(curl --request POST -L \"${runners_gitlab_url}/api/v4/runners\" \\\n    --form \"token=${gitlab_runner_registration_token}\" \\\n    --form \"description=${giltab_runner_description}\" \\\n    --form \"locked=${gitlab_runner_locked_to_project}\" \\\n    --form \"run_untagged=${gitlab_runner_run_untagged}\" \\\n    --form \"maximum_timeout=${gitlab_runner_maximum_timeout}\" \\\n    --form \"access_level=${gitlab_runner_access_level}\" \\\n    | jq -r .token)\n  aws ssm put-parameter --overwrite --type SecureString --name \"${runners_ssm_token_key}\" --value $token --region \"${ssm_region}\"\nfi\n\nsed -i.bak s/__TO_BE_REPLACED_BY_USER_DATA__/`echo $token`/g /etc/gitlab-runner/config.toml\n\nservice gitlab-runner restart\nchkconfig gitlab-runner on\n\n# vim: set ft=sh:\n",
          "vars": {
            "docker_machine_version": "0.16.2",
            "giltab_runner_description": "runner default - auto",
            "gitlab_runner_access_level": "not_protected",
            "gitlab_runner_locked_to_project": "true",
            "gitlab_runner_maximum_timeout": "3600",
            "gitlab_runner_registration_token": "GBpeL612xfp3DtEjzZsx",
            "gitlab_runner_run_untagged": "false",
            "gitlab_runner_version": "12.3.0",
            "runners_gitlab_url": "https://gitlab.com",
            "runners_ssm_token_key": "gitlab-runner-runner-token",
            "ssm_region": "ap-southeast-2",
            "user_data_trace_log": "false"
          }
        },
        "after_unknown": {
          "id": true,
          "rendered": true,
          "vars": {
            "runners_config": true
          }
        }
      }
    },
    {
      "address": "module.vpc.aws_eip.nat[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "associate_with_private_ip": null,
          "tags": {
            "Name": "vpc-gitlab-runner-ap-southeast-2a"
          },
          "timeouts": null,
          "vpc": true
        },
        "after_unknown": {
          "allocation_id": true,
          "association_id": true,
          "domain": true,
          "id": true,
          "instance": true,
          "network_interface": true,
          "private_dns": true,
          "private_ip": true,
          "public_dns": true,
          "public_ip": true,
          "public_ipv4_pool": true,
          "tags": {}
        }
      }
    },
    {
      "address": "module.vpc.aws_internet_gateway.this[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "this",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "tags": {
            "Name": "vpc-gitlab-runner"
          }
        },
        "after_unknown": {
          "id": true,
          "owner_id": true,
          "tags": {},
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_nat_gateway.this[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "this",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "tags": {
            "Name": "vpc-gitlab-runner-ap-southeast-2a"
          }
        },
        "after_unknown": {
          "allocation_id": true,
          "id": true,
          "network_interface_id": true,
          "private_ip": true,
          "public_ip": true,
          "subnet_id": true,
          "tags": {}
        }
      }
    },
    {
      "address": "module.vpc.aws_route.private_nat_gateway[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "private_nat_gateway",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "destination_cidr_block": "0.0.0.0/0",
          "destination_ipv6_cidr_block": null,
          "timeouts": {
            "create": "5m",
            "delete": null
          },
          "transit_gateway_id": null,
          "vpc_peering_connection_id": null
        },
        "after_unknown": {
          "destination_prefix_list_id": true,
          "egress_only_gateway_id": true,
          "gateway_id": true,
          "id": true,
          "instance_id": true,
          "instance_owner_id": true,
          "nat_gateway_id": true,
          "network_interface_id": true,
          "origin": true,
          "route_table_id": true,
          "state": true,
          "timeouts": {}
        }
      }
    },
    {
      "address": "module.vpc.aws_route.public_internet_gateway[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_route",
      "name": "public_internet_gateway",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "destination_cidr_block": "0.0.0.0/0",
          "destination_ipv6_cidr_block": null,
          "timeouts": {
            "create": "5m",
            "delete": null
          },
          "transit_gateway_id": null,
          "vpc_peering_connection_id": null
        },
        "after_unknown": {
          "destination_prefix_list_id": true,
          "egress_only_gateway_id": true,
          "gateway_id": true,
          "id": true,
          "instance_id": true,
          "instance_owner_id": true,
          "nat_gateway_id": true,
          "network_interface_id": true,
          "origin": true,
          "route_table_id": true,
          "state": true,
          "timeouts": {}
        }
      }
    },
    {
      "address": "module.vpc.aws_route_table.private[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "private",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "tags": {
            "Name": "vpc-gitlab-runner-private"
          }
        },
        "after_unknown": {
          "id": true,
          "owner_id": true,
          "propagating_vgws": true,
          "route": true,
          "tags": {},
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_route_table.public[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "tags": {
            "Name": "vpc-gitlab-runner-public"
          }
        },
        "after_unknown": {
          "id": true,
          "owner_id": true,
          "propagating_vgws": true,
          "route": true,
          "tags": {},
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_route_table_association.private[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {},
        "after_unknown": {
          "id": true,
          "route_table_id": true,
          "subnet_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_route_table_association.public[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {},
        "after_unknown": {
          "id": true,
          "route_table_id": true,
          "subnet_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_subnet.private[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assign_ipv6_address_on_creation": false,
          "availability_zone": "ap-southeast-2a",
          "cidr_block": "10.0.1.0/24",
          "map_public_ip_on_launch": false,
          "tags": {
            "Name": "vpc-gitlab-runner-private-ap-southeast-2a"
          },
          "timeouts": null
        },
        "after_unknown": {
          "arn": true,
          "availability_zone_id": true,
          "id": true,
          "ipv6_cidr_block": true,
          "ipv6_cidr_block_association_id": true,
          "owner_id": true,
          "tags": {},
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_subnet.public[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assign_ipv6_address_on_creation": false,
          "availability_zone": "ap-southeast-2a",
          "cidr_block": "10.0.101.0/24",
          "map_public_ip_on_launch": true,
          "tags": {
            "Name": "vpc-gitlab-runner-public-ap-southeast-2a"
          },
          "timeouts": null
        },
        "after_unknown": {
          "arn": true,
          "availability_zone_id": true,
          "id": true,
          "ipv6_cidr_block": true,
          "ipv6_cidr_block_association_id": true,
          "owner_id": true,
          "tags": {},
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_vpc.this[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc",
      "name": "this",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "assign_generated_ipv6_cidr_block": false,
          "cidr_block": "10.0.0.0/16",
          "enable_dns_hostnames": false,
          "enable_dns_support": true,
          "instance_tenancy": "default",
          "tags": {
            "Name": "vpc-gitlab-runner"
          }
        },
        "after_unknown": {
          "arn": true,
          "default_network_acl_id": true,
          "default_route_table_id": true,
          "default_security_group_id": true,
          "dhcp_options_id": true,
          "enable_classiclink": true,
          "enable_classiclink_dns_support": true,
          "id": true,
          "ipv6_association_id": true,
          "ipv6_cidr_block": true,
          "main_route_table_id": true,
          "owner_id": true,
          "tags": {}
        }
      }
    },
    {
      "address": "module.vpc.aws_vpc_endpoint.s3[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "s3",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {
          "auto_accept": null,
          "private_dns_enabled": false,
          "service_name": "com.amazonaws.ap-southeast-2.s3",
          "tags": null,
          "timeouts": null,
          "vpc_endpoint_type": "Gateway"
        },
        "after_unknown": {
          "cidr_blocks": true,
          "dns_entry": true,
          "id": true,
          "network_interface_ids": true,
          "owner_id": true,
          "policy": true,
          "prefix_list_id": true,
          "requester_managed": true,
          "route_table_ids": true,
          "security_group_ids": true,
          "state": true,
          "subnet_ids": true,
          "vpc_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_vpc_endpoint_route_table_association.private_s3[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "private_s3",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {},
        "after_unknown": {
          "id": true,
          "route_table_id": true,
          "vpc_endpoint_id": true
        }
      }
    },
    {
      "address": "module.vpc.aws_vpc_endpoint_route_table_association.public_s3[0]",
      "module_address": "module.vpc",
      "mode": "managed",
      "type": "aws_vpc_endpoint_route_table_association",
      "name": "public_s3",
      "index": 0,
      "provider_name": "aws",
      "change": {
        "actions": [
          "create"
        ],
        "before": null,
        "after": {},
        "after_unknown": {
          "id": true,
          "route_table_id": true,
          "vpc_endpoint_id": true
        }
      }
    }
  ],
  "prior_state": {
    "format_version": "0.1",
    "terraform_version": "0.12.9",
    "values": {
      "root_module": {
        "resources": [
          {
            "address": "data.aws_availability_zones.available",
            "mode": "data",
            "type": "aws_availability_zones",
            "name": "available",
            "provider_name": "aws",
            "schema_version": 0,
            "values": {
              "blacklisted_names": null,
              "blacklisted_zone_ids": null,
              "id": "2019-10-13 14:04:38.316953 +0000 UTC",
              "names": [
                "ap-southeast-2a",
                "ap-southeast-2b",
                "ap-southeast-2c"
              ],
              "state": "available",
              "zone_ids": [
                "apse2-az1",
                "apse2-az3",
                "apse2-az2"
              ]
            }
          }
        ],
        "child_modules": [
          {
            "resources": [
              {
                "address": "data.aws_ami.docker-machine",
                "mode": "data",
                "type": "aws_ami",
                "name": "docker-machine",
                "provider_name": "aws",
                "schema_version": 0,
                "values": {
                  "architecture": "x86_64",
                  "block_device_mappings": [
                    {
                      "device_name": "/dev/sda1",
                      "ebs": {
                        "delete_on_termination": "true",
                        "encrypted": "false",
                        "iops": "0",
                        "snapshot_id": "snap-0ff93853a9b3f63d8",
                        "volume_size": "8",
                        "volume_type": "gp2"
                      },
                      "no_device": "",
                      "virtual_name": ""
                    },
                    {
                      "device_name": "/dev/sdb",
                      "ebs": {},
                      "no_device": "",
                      "virtual_name": "ephemeral0"
                    },
                    {
                      "device_name": "/dev/sdc",
                      "ebs": {},
                      "no_device": "",
                      "virtual_name": "ephemeral1"
                    }
                  ],
                  "creation_date": "2019-09-13T17:29:07.000Z",
                  "description": "Canonical, Ubuntu, 16.04 LTS, amd64 xenial image build on 2019-09-13",
                  "executable_users": null,
                  "filter": [
                    {
                      "name": "name",
                      "values": [
                        "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"
                      ]
                    }
                  ],
                  "hypervisor": "xen",
                  "id": "ami-0328aad0f6218c429",
                  "image_id": "ami-0328aad0f6218c429",
                  "image_location": "099720109477/ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190913",
                  "image_owner_alias": null,
                  "image_type": "machine",
                  "kernel_id": null,
                  "most_recent": true,
                  "name": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20190913",
                  "name_regex": null,
                  "owner_id": "099720109477",
                  "owners": [
                    "099720109477"
                  ],
                  "platform": null,
                  "product_codes": [],
                  "public": true,
                  "ramdisk_id": null,
                  "root_device_name": "/dev/sda1",
                  "root_device_type": "ebs",
                  "root_snapshot_id": "snap-0ff93853a9b3f63d8",
                  "sriov_net_support": "simple",
                  "state": "available",
                  "state_reason": {
                    "code": "UNSET",
                    "message": "UNSET"
                  },
                  "tags": {},
                  "virtualization_type": "hvm"
                }
              },
              {
                "address": "data.aws_ami.runner",
                "mode": "data",
                "type": "aws_ami",
                "name": "runner",
                "provider_name": "aws",
                "schema_version": 0,
                "values": {
                  "architecture": "x86_64",
                  "block_device_mappings": [
                    {
                      "device_name": "/dev/xvda",
                      "ebs": {
                        "delete_on_termination": "true",
                        "encrypted": "false",
                        "iops": "0",
                        "snapshot_id": "snap-0a3de281278d574d8",
                        "volume_size": "8",
                        "volume_type": "standard"
                      },
                      "no_device": "",
                      "virtual_name": ""
                    }
                  ],
                  "creation_date": "2019-08-26T20:04:12.000Z",
                  "description": "Amazon Linux AMI 2018.03.0.20190826 x86_64 HVM ebs",
                  "executable_users": null,
                  "filter": [
                    {
                      "name": "name",
                      "values": [
                        "amzn-ami-hvm-2018.03*-x86_64-ebs"
                      ]
                    }
                  ],
                  "hypervisor": "xen",
                  "id": "ami-042710e2a62ecec92",
                  "image_id": "ami-042710e2a62ecec92",
                  "image_location": "amazon/amzn-ami-hvm-2018.03.0.20190826-x86_64-ebs",
                  "image_owner_alias": "amazon",
                  "image_type": "machine",
                  "kernel_id": null,
                  "most_recent": true,
                  "name": "amzn-ami-hvm-2018.03.0.20190826-x86_64-ebs",
                  "name_regex": null,
                  "owner_id": "137112412989",
                  "owners": [
                    "amazon"
                  ],
                  "platform": null,
                  "product_codes": [],
                  "public": true,
                  "ramdisk_id": null,
                  "root_device_name": "/dev/xvda",
                  "root_device_type": "ebs",
                  "root_snapshot_id": "snap-0a3de281278d574d8",
                  "sriov_net_support": "simple",
                  "state": "available",
                  "state_reason": {
                    "code": "UNSET",
                    "message": "UNSET"
                  },
                  "tags": {},
                  "virtualization_type": "hvm"
                }
              },
              {
                "address": "data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_name": "aws",
                "schema_version": 0,
                "values": {
                  "account_id": "885164491973",
                  "arn": "arn:aws:iam::885164491973:user/alex",
                  "id": "2019-10-13 14:04:39.485197 +0000 UTC",
                  "user_id": "AIDAIA2HJENE7W7DDPY5G"
                }
              },
              {
                "address": "data.template_file.dockermachine_role_trust_policy",
                "mode": "data",
                "type": "template_file",
                "name": "dockermachine_role_trust_policy",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "076813d744fd385b5d2f7835cf05a679ebb0aabfbbbf5a6276fe332b21574ef9",
                  "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
                  "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
                  "vars": null
                }
              },
              {
                "address": "data.template_file.instance_docker_machine_policy",
                "mode": "data",
                "type": "template_file",
                "name": "instance_docker_machine_policy",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "0eb6c3eef4e4dbb84db587607b70ac45ce271dfda81550e61eff9c005748cea4",
                  "rendered": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": [\n          \"ec2:DescribeKeyPairs\",\n          \"ec2:TerminateInstances\",\n          \"ec2:StopInstances\",\n          \"ec2:StartInstances\",\n          \"ec2:RunInstances\",\n          \"ec2:RebootInstances\",\n          \"ec2:CreateKeyPair\",\n          \"ec2:DeleteKeyPair\",\n          \"ec2:ImportKeyPair\",\n          \"ec2:Describe*\",\n          \"ec2:CreateTags\",\n          \"ec2:RequestSpotInstances\",\n          \"ec2:CancelSpotInstanceRequests\",\n          \"ec2:DescribeSubnets\",\n          \"ec2:AssociateIamInstanceProfile\",\n          \"iam:PassRole\"\n        ],\n        \"Effect\": \"Allow\",\n        \"Resource\": \"*\"\n      }\n    ]\n  }\n",
                  "template": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Action\": [\n          \"ec2:DescribeKeyPairs\",\n          \"ec2:TerminateInstances\",\n          \"ec2:StopInstances\",\n          \"ec2:StartInstances\",\n          \"ec2:RunInstances\",\n          \"ec2:RebootInstances\",\n          \"ec2:CreateKeyPair\",\n          \"ec2:DeleteKeyPair\",\n          \"ec2:ImportKeyPair\",\n          \"ec2:Describe*\",\n          \"ec2:CreateTags\",\n          \"ec2:RequestSpotInstances\",\n          \"ec2:CancelSpotInstanceRequests\",\n          \"ec2:DescribeSubnets\",\n          \"ec2:AssociateIamInstanceProfile\",\n          \"iam:PassRole\"\n        ],\n        \"Effect\": \"Allow\",\n        \"Resource\": \"*\"\n      }\n    ]\n  }\n",
                  "vars": null
                }
              },
              {
                "address": "data.template_file.instance_profile",
                "mode": "data",
                "type": "template_file",
                "name": "instance_profile",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "dfc92f1d1a2d77d35956f5027600590d5209342b3ac3d39f8959e5a372db8afc",
                  "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"allowLoggingToCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\"\n      ],\n      \"Resource\": [\n        \"arn:aws:logs:*:*:*\"\n      ]\n    }\n  ]\n}\n",
                  "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"allowLoggingToCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\",\n        \"logs:DescribeLogStreams\"\n      ],\n      \"Resource\": [\n        \"arn:aws:logs:*:*:*\"\n      ]\n    }\n  ]\n}\n",
                  "vars": null
                }
              },
              {
                "address": "data.template_file.instance_role_trust_policy",
                "mode": "data",
                "type": "template_file",
                "name": "instance_role_trust_policy",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "076813d744fd385b5d2f7835cf05a679ebb0aabfbbbf5a6276fe332b21574ef9",
                  "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
                  "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
                  "vars": null
                }
              },
              {
                "address": "data.template_file.instance_session_manager_policy",
                "mode": "data",
                "type": "template_file",
                "name": "instance_session_manager_policy",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "d18ef671737961f82e7b653b02ec13b66c180dd4d8f183fa9ba52dac6893e5b6",
                  "rendered": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssmmessages:CreateControlChannel\",\n                \"ssmmessages:CreateDataChannel\",\n                \"ssmmessages:OpenControlChannel\",\n                \"ssmmessages:OpenDataChannel\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}",
                  "template": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssmmessages:CreateControlChannel\",\n                \"ssmmessages:CreateDataChannel\",\n                \"ssmmessages:OpenControlChannel\",\n                \"ssmmessages:OpenDataChannel\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}",
                  "vars": null
                }
              },
              {
                "address": "data.template_file.service_linked_role",
                "mode": "data",
                "type": "template_file",
                "name": "service_linked_role",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "1810d3d0047d4a566eaf344d20df8e28f83e9d9591cf18a8f1f70545d531f7e1",
                  "rendered": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:CreateServiceLinkedRole\",\n      \"Resource\": \"arn:aws:iam::*:role/aws-service-role/*\"\n    }\n  ]\n}",
                  "template": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"iam:CreateServiceLinkedRole\",\n      \"Resource\": \"arn:aws:iam::*:role/aws-service-role/*\"\n    }\n  ]\n}",
                  "vars": null
                }
              },
              {
                "address": "data.template_file.ssm_policy",
                "mode": "data",
                "type": "template_file",
                "name": "ssm_policy",
                "provider_name": "template",
                "schema_version": 0,
                "values": {
                  "filename": null,
                  "id": "682038adca60ed5248dea881521e3fd90039ac69fa9a7a3e9bf1932ba4cc3664",
                  "rendered": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:PutParameter\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:GetParameters\"\n            ],\n            \"Resource\": \"arn:aws:ssm:*\"\n        }\n    ]\n}",
                  "template": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:PutParameter\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ssm:GetParameters\"\n            ],\n            \"Resource\": \"arn:aws:ssm:*\"\n        }\n    ]\n}",
                  "vars": null
                }
              }
            ],
            "address": "module.runner"
          },
          {
            "resources": [
              {
                "address": "data.aws_vpc_endpoint_service.s3",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "s3",
                "index": 0,
                "provider_name": "aws",
                "schema_version": 0,
                "values": {
                  "acceptance_required": false,
                  "availability_zones": [
                    "ap-southeast-2a",
                    "ap-southeast-2b",
                    "ap-southeast-2c"
                  ],
                  "base_endpoint_dns_names": [
                    "s3.ap-southeast-2.amazonaws.com"
                  ],
                  "id": "1802082413",
                  "manages_vpc_endpoints": false,
                  "owner": "amazon",
                  "private_dns_name": "",
                  "service": "s3",
                  "service_id": "vpce-svc-0aa3c284dcb4652c2",
                  "service_name": "com.amazonaws.ap-southeast-2.s3",
                  "service_type": "Gateway",
                  "tags": {},
                  "vpc_endpoint_policy_supported": true
                }
              }
            ],
            "address": "module.vpc"
          }
        ]
      }
    }
  },
  "configuration": {
    "root_module": {
      "resources": [
        {
          "address": "data.aws_availability_zones.available",
          "mode": "data",
          "type": "aws_availability_zones",
          "name": "available",
          "provider_config_key": "aws",
          "expressions": {
            "state": {
              "constant_value": "available"
            }
          },
          "schema_version": 0
        }
      ],
      "module_calls": {
        "runner": {
          "source": "../../",
          "expressions": {
            "aws_region": {
              "constant_value": "ap-southeast-2"
            },
            "cache_bucket_name": {
              "references": [
                "var.bucket_name"
              ]
            },
            "enable_gitlab_runner_ssh_access": {
              "references": [
                "var.enable_gitlab_runner_ssh_access"
              ]
            },
            "gitlab_runner_registration_config": {
              "references": [
                "var.registration_token"
              ]
            },
            "key_name": {
              "constant_value": "default"
            },
            "runners_gitlab_url": {
              "constant_value": "https://gitlab.com"
            },
            "runners_name": {
              "constant_value": "test-runner"
            },
            "runners_off_peak_idle_count": {
              "constant_value": 0
            },
            "runners_off_peak_idle_time": {
              "constant_value": 60
            },
            "runners_off_peak_periods": {
              "constant_value": "[\"* * 0-9,17-23 * * mon-fri *\", \"* * * * * sat,sun *\"]"
            },
            "runners_off_peak_timezone": {
              "constant_value": "Australia/Sydney"
            },
            "subnet_id_runners": {
              "references": [
                "module.vpc.private_subnets"
              ]
            },
            "subnet_ids_gitlab_runner": {
              "references": [
                "module.vpc.private_subnets"
              ]
            },
            "vpc_id": {
              "references": [
                "module.vpc.vpc_id"
              ]
            }
          },
          "module": {
            "outputs": {
              "runner_agent_role_arn": {
                "expression": {
                  "references": [
                    "aws_iam_role.instance"
                  ]
                },
                "description": "ARN of the role used for the ec2 instance for the GitLab runner agent."
              },
              "runner_agent_role_name": {
                "expression": {
                  "references": [
                    "aws_iam_role.instance"
                  ]
                },
                "description": "Name of the role used for the ec2 instance for the GitLab runner agent."
              },
              "runner_agent_sg_id": {
                "expression": {
                  "references": [
                    "aws_security_group.runner"
                  ]
                },
                "description": "ID of the security group attached to the GitLab runner agent."
              },
              "runner_as_group_name": {
                "expression": {
                  "references": [
                    "aws_autoscaling_group.gitlab_runner_instance"
                  ]
                },
                "description": "Name of the autoscaling group for the gitlab-runner instance"
              },
              "runner_cache_bucket_arn": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.build_cache"
                  ]
                },
                "description": "ARN of the S3 for the build cache."
              },
              "runner_cache_bucket_name": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.build_cache"
                  ]
                },
                "description": "Name of the S3 for the build cache."
              },
              "runner_role_arn": {
                "expression": {
                  "references": [
                    "aws_iam_role.docker_machine"
                  ]
                },
                "description": "ARN of the role used for the docker machine runners."
              },
              "runner_role_name": {
                "expression": {
                  "references": [
                    "aws_iam_role.docker_machine"
                  ]
                },
                "description": "Name of the role used for the docker machine runners."
              },
              "runner_sg_id": {
                "expression": {
                  "references": [
                    "aws_security_group.docker_machine"
                  ]
                },
                "description": "ID of the security group attached to the docker machine runners."
              }
            },
            "resources": [
              {
                "address": "aws_autoscaling_group.gitlab_runner_instance",
                "mode": "managed",
                "type": "aws_autoscaling_group",
                "name": "gitlab_runner_instance",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "desired_capacity": {
                    "constant_value": "1"
                  },
                  "health_check_grace_period": {
                    "constant_value": 0
                  },
                  "launch_configuration": {
                    "references": [
                      "aws_launch_configuration.gitlab_runner_instance"
                    ]
                  },
                  "max_size": {
                    "constant_value": "1"
                  },
                  "min_size": {
                    "constant_value": "1"
                  },
                  "name": {
                    "constant_value": "gitlab-runner-as-group"
                  },
                  "vpc_zone_identifier": {
                    "references": [
                      "var.subnet_ids_gitlab_runner"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_autoscaling_schedule.scale_in",
                "mode": "managed",
                "type": "aws_autoscaling_schedule",
                "name": "scale_in",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "autoscaling_group_name": {
                    "references": [
                      "aws_autoscaling_group.gitlab_runner_instance"
                    ]
                  },
                  "desired_capacity": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "max_size": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "min_size": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "recurrence": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "scheduled_action_name": {
                    "references": [
                      "aws_autoscaling_group.gitlab_runner_instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_autoscaling_schedule.scale_out",
                "mode": "managed",
                "type": "aws_autoscaling_schedule",
                "name": "scale_out",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "autoscaling_group_name": {
                    "references": [
                      "aws_autoscaling_group.gitlab_runner_instance"
                    ]
                  },
                  "desired_capacity": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "max_size": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "min_size": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "recurrence": {
                    "references": [
                      "var.schedule_config"
                    ]
                  },
                  "scheduled_action_name": {
                    "references": [
                      "aws_autoscaling_group.gitlab_runner_instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_cloudwatch_log_group.environment",
                "mode": "managed",
                "type": "aws_cloudwatch_log_group",
                "name": "environment",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name": {
                    "constant_value": "gitlab-runner-log-group"
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_instance_profile.docker_machine",
                "mode": "managed",
                "type": "aws_iam_instance_profile",
                "name": "docker_machine",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name": {
                    "constant_value": "gitlab-runner-docker-machine-profile"
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.docker_machine"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_instance_profile.instance",
                "mode": "managed",
                "type": "aws_iam_instance_profile",
                "name": "instance",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name": {
                    "constant_value": "gitlab-runner-instance-profile"
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_policy.docker_machine_cache",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "docker_machine_cache",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "description": {
                    "constant_value": "Policy for docker machine instance to access cache"
                  },
                  "name": {
                    "constant_value": "gitlab-runner-docker-machine-cache"
                  },
                  "path": {
                    "constant_value": "/"
                  },
                  "policy": {
                    "references": [
                      "data.template_file.docker_machine_cache_policy"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_policy.instance_docker_machine_policy",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "instance_docker_machine_policy",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "description": {
                    "constant_value": "Policy for docker machine."
                  },
                  "name": {
                    "constant_value": "gitlab-runner-docker-machine"
                  },
                  "path": {
                    "constant_value": "/"
                  },
                  "policy": {
                    "references": [
                      "data.template_file.instance_docker_machine_policy"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_policy.instance_session_manager_policy",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "instance_session_manager_policy",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "description": {
                    "constant_value": "Policy session manager."
                  },
                  "name": {
                    "constant_value": "gitlab-runner-session-manager"
                  },
                  "path": {
                    "constant_value": "/"
                  },
                  "policy": {
                    "references": [
                      "data.template_file.instance_session_manager_policy"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_policy.service_linked_role",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "service_linked_role",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "description": {
                    "constant_value": "Policy for creation of service linked roles."
                  },
                  "name": {
                    "constant_value": "gitlab-runner-service_linked_role"
                  },
                  "path": {
                    "constant_value": "/"
                  },
                  "policy": {
                    "references": [
                      "data.template_file.service_linked_role"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_policy.ssm",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "ssm",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "description": {
                    "constant_value": "Policy for runner token param access via SSM"
                  },
                  "name": {
                    "constant_value": "gitlab-runner-ssm"
                  },
                  "path": {
                    "constant_value": "/"
                  },
                  "policy": {
                    "references": [
                      "data.template_file.ssm_policy"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role.docker_machine",
                "mode": "managed",
                "type": "aws_iam_role",
                "name": "docker_machine",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "assume_role_policy": {
                    "references": [
                      "data.template_file.dockermachine_role_trust_policy"
                    ]
                  },
                  "name": {
                    "constant_value": "gitlab-runner-docker-machine-role"
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role.instance",
                "mode": "managed",
                "type": "aws_iam_role",
                "name": "instance",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "assume_role_policy": {
                    "references": [
                      "data.template_file.instance_role_trust_policy"
                    ]
                  },
                  "name": {
                    "constant_value": "gitlab-runner-instance-role"
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy.instance",
                "mode": "managed",
                "type": "aws_iam_role_policy",
                "name": "instance",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name": {
                    "constant_value": "gitlab-runner-instance-role"
                  },
                  "policy": {
                    "references": [
                      "data.template_file.instance_profile"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy_attachment.docker_machine_cache_instance",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "docker_machine_cache_instance",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.docker_machine_cache"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy_attachment.instance_docker_machine_policy",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "instance_docker_machine_policy",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.instance_docker_machine_policy"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy_attachment.instance_session_manager_aws_managed",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "instance_session_manager_aws_managed",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "policy_arn": {
                    "constant_value": "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy_attachment.instance_session_manager_policy",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "instance_session_manager_policy",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.instance_session_manager_policy"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy_attachment.service_linked_role",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "service_linked_role",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.service_linked_role"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_iam_role_policy_attachment.ssm",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "ssm",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.ssm"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.instance"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_launch_configuration.gitlab_runner_instance",
                "mode": "managed",
                "type": "aws_launch_configuration",
                "name": "gitlab_runner_instance",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "associate_public_ip_address": {
                    "references": [
                      "var.enable_gitlab_runner_ssh_access"
                    ]
                  },
                  "iam_instance_profile": {
                    "references": [
                      "aws_iam_instance_profile.instance"
                    ]
                  },
                  "image_id": {
                    "references": [
                      "data.aws_ami.runner"
                    ]
                  },
                  "instance_type": {
                    "references": [
                      "local.instance_type"
                    ]
                  },
                  "key_name": {
                    "references": [
                      "var.key_name"
                    ]
                  },
                  "root_block_device": [
                    {
                      "delete_on_termination": {
                        "constant_value": true
                      },
                      "volume_size": {
                        "constant_value": 8
                      },
                      "volume_type": {
                        "constant_value": "gp2"
                      }
                    }
                  ],
                  "security_groups": {
                    "references": [
                      "aws_security_group.runner"
                    ]
                  },
                  "user_data": {
                    "references": [
                      "data.template_file.user_data"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "aws_s3_bucket.build_cache",
                "mode": "managed",
                "type": "aws_s3_bucket",
                "name": "build_cache",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "acl": {
                    "constant_value": "private"
                  },
                  "bucket": {
                    "references": [
                      "var.cache_bucket_name"
                    ]
                  },
                  "force_destroy": {
                    "constant_value": true
                  },
                  "lifecycle_rule": [
                    {
                      "enabled": {
                        "constant_value": true
                      },
                      "expiration": [
                        {
                          "days": {
                            "references": [
                              "var.cache_expiration_days"
                            ]
                          }
                        }
                      ],
                      "id": {
                        "constant_value": "clear"
                      },
                      "noncurrent_version_expiration": [
                        {
                          "days": {
                            "references": [
                              "var.cache_expiration_days"
                            ]
                          }
                        }
                      ],
                      "prefix": {
                        "constant_value": "runner/"
                      }
                    }
                  ],
                  "server_side_encryption_configuration": [
                    {
                      "rule": [
                        {
                          "apply_server_side_encryption_by_default": [
                            {
                              "sse_algorithm": {
                                "constant_value": "AES256"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "schema_version": 0
              },
              {
                "address": "aws_security_group.docker_machine",
                "mode": "managed",
                "type": "aws_security_group",
                "name": "docker_machine",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name_prefix": {
                    "constant_value": "gitlab-runner-docker-machine"
                  },
                  "vpc_id": {
                    "references": [
                      "var.vpc_id"
                    ]
                  }
                },
                "schema_version": 1
              },
              {
                "address": "aws_security_group.runner",
                "mode": "managed",
                "type": "aws_security_group",
                "name": "runner",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name_prefix": {
                    "constant_value": "gitlab-runner-security-group"
                  },
                  "vpc_id": {
                    "references": [
                      "var.vpc_id"
                    ]
                  }
                },
                "schema_version": 1
              },
              {
                "address": "aws_security_group_rule.docker_machine_docker_runner",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "docker_machine_docker_runner",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "from_port": {
                    "constant_value": 2376
                  },
                  "protocol": {
                    "constant_value": "tcp"
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.docker_machine"
                    ]
                  },
                  "source_security_group_id": {
                    "references": [
                      "aws_security_group.runner"
                    ]
                  },
                  "to_port": {
                    "constant_value": 2376
                  },
                  "type": {
                    "constant_value": "ingress"
                  }
                },
                "schema_version": 2
              },
              {
                "address": "aws_security_group_rule.docker_machine_docker_self",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "docker_machine_docker_self",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "from_port": {
                    "constant_value": 2376
                  },
                  "protocol": {
                    "constant_value": "tcp"
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.docker_machine"
                    ]
                  },
                  "self": {
                    "constant_value": true
                  },
                  "to_port": {
                    "constant_value": 2376
                  },
                  "type": {
                    "constant_value": "ingress"
                  }
                },
                "schema_version": 2
              },
              {
                "address": "aws_security_group_rule.docker_machine_ssh",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "docker_machine_ssh",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "cidr_blocks": {
                    "references": [
                      "var.docker_machine_ssh_cidr_blocks"
                    ]
                  },
                  "from_port": {
                    "constant_value": 22
                  },
                  "protocol": {
                    "constant_value": "tcp"
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.docker_machine"
                    ]
                  },
                  "to_port": {
                    "constant_value": 22
                  },
                  "type": {
                    "constant_value": "ingress"
                  }
                },
                "schema_version": 2
              },
              {
                "address": "aws_security_group_rule.out_all",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "out_all",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "cidr_blocks": {
                    "constant_value": [
                      "0.0.0.0/0"
                    ]
                  },
                  "from_port": {
                    "constant_value": 0
                  },
                  "protocol": {
                    "constant_value": "-1"
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.docker_machine"
                    ]
                  },
                  "to_port": {
                    "constant_value": 65535
                  },
                  "type": {
                    "constant_value": "egress"
                  }
                },
                "schema_version": 2
              },
              {
                "address": "aws_security_group_rule.runner_ssh",
                "mode": "managed",
                "type": "aws_security_group_rule",
                "name": "runner_ssh",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "cidr_blocks": {
                    "references": [
                      "var.gitlab_runner_ssh_cidr_blocks"
                    ]
                  },
                  "from_port": {
                    "constant_value": 22
                  },
                  "protocol": {
                    "constant_value": "tcp"
                  },
                  "security_group_id": {
                    "references": [
                      "aws_security_group.runner"
                    ]
                  },
                  "to_port": {
                    "constant_value": 22
                  },
                  "type": {
                    "constant_value": "ingress"
                  }
                },
                "schema_version": 2,
                "count_expression": {
                  "references": [
                    "var.enable_gitlab_runner_ssh_access"
                  ]
                }
              },
              {
                "address": "aws_ssm_parameter.runner_registration_token",
                "mode": "managed",
                "type": "aws_ssm_parameter",
                "name": "runner_registration_token",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "name": {
                    "references": [
                      "local.runners_ssm_token_key"
                    ]
                  },
                  "type": {
                    "constant_value": "SecureString"
                  },
                  "value": {
                    "constant_value": "null"
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.aws_ami.docker-machine",
                "mode": "data",
                "type": "aws_ami",
                "name": "docker-machine",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "filter": [
                    {
                      "name": {
                        "constant_value": "name"
                      },
                      "values": {
                        "constant_value": [
                          "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"
                        ]
                      }
                    }
                  ],
                  "most_recent": {
                    "constant_value": "true"
                  },
                  "owners": {
                    "constant_value": [
                      "099720109477"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.aws_ami.runner",
                "mode": "data",
                "type": "aws_ami",
                "name": "runner",
                "provider_config_key": "runner:aws",
                "expressions": {
                  "filter": [
                    {
                      "name": {
                        "constant_value": "name"
                      },
                      "values": {
                        "constant_value": [
                          "amzn-ami-hvm-2018.03*-x86_64-ebs"
                        ]
                      }
                    }
                  ],
                  "most_recent": {
                    "constant_value": "true"
                  },
                  "owners": {
                    "constant_value": [
                      "amazon"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_config_key": "runner:aws",
                "schema_version": 0
              },
              {
                "address": "data.template_file.docker_machine_cache_policy",
                "mode": "data",
                "type": "template_file",
                "name": "docker_machine_cache_policy",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  },
                  "vars": {
                    "references": [
                      "aws_s3_bucket.build_cache"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.dockermachine_role_trust_policy",
                "mode": "data",
                "type": "template_file",
                "name": "dockermachine_role_trust_policy",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.instance_docker_machine_policy",
                "mode": "data",
                "type": "template_file",
                "name": "instance_docker_machine_policy",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.instance_profile",
                "mode": "data",
                "type": "template_file",
                "name": "instance_profile",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.instance_role_trust_policy",
                "mode": "data",
                "type": "template_file",
                "name": "instance_role_trust_policy",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.instance_session_manager_policy",
                "mode": "data",
                "type": "template_file",
                "name": "instance_session_manager_policy",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.runners",
                "mode": "data",
                "type": "template_file",
                "name": "runners",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  },
                  "vars": {
                    "references": [
                      "var.aws_region",
                      "var.cache_bucket_name",
                      "var.runners_gitlab_url",
                      "data.aws_ami.docker-machine",
                      "var.aws_zone",
                      "var.runners_concurrent",
                      "var.runners_environment_vars",
                      "var.runners_idle_count",
                      "var.runners_idle_time",
                      "local.runners_image",
                      "aws_iam_instance_profile.docker_machine",
                      "local.docker_machine_instance_type",
                      "var.runners_limit",
                      "var.runners_max_builds",
                      "var.runners_monitoring",
                      "var.runners_name",
                      "var.runners_off_peak_idle_count",
                      "var.runners_off_peak_idle_time",
                      "var.runners_off_peak_periods",
                      "var.runners_off_peak_timezone",
                      "var.runners_output_limit",
                      "local.runners_privileged",
                      "local.runners_pull_policy",
                      "var.runners_request_concurrency",
                      "var.runners_root_size",
                      "aws_security_group.docker_machine",
                      "var.runners_shm_size",
                      "local.docker_machine_spot_price_bid",
                      "var.subnet_id_runners",
                      "var.vpc_id"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.service_linked_role",
                "mode": "data",
                "type": "template_file",
                "name": "service_linked_role",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.ssm_policy",
                "mode": "data",
                "type": "template_file",
                "name": "ssm_policy",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  }
                },
                "schema_version": 0
              },
              {
                "address": "data.template_file.user_data",
                "mode": "data",
                "type": "template_file",
                "name": "user_data",
                "provider_config_key": "runner:template",
                "expressions": {
                  "template": {
                    "references": [
                      "path.module"
                    ]
                  },
                  "vars": {
                    "references": [
                      "local.docker_machine_version",
                      "var.gitlab_runner_registration_config",
                      "var.gitlab_runner_registration_config",
                      "var.gitlab_runner_registration_config",
                      "var.gitlab_runner_registration_config",
                      "var.gitlab_runner_registration_config",
                      "var.gitlab_runner_registration_config",
                      "local.gitlab_runner_version",
                      "data.template_file.runners",
                      "var.runners_gitlab_url",
                      "local.runners_ssm_token_key",
                      "var.aws_region",
                      "var.enable_runner_user_data_trace_log"
                    ]
                  }
                },
                "schema_version": 0
              }
            ],
            "variables": {
              "aws_region": {
                "description": "AWS region"
              },
              "aws_zone": {
                "default": "a",
                "description": "AWS availability zone (typically 'a', 'b', or 'c'), used in config.toml"
              },
              "cache_bucket_name": {
                "description": "The bucket name of the S3 cache bucket"
              },
              "cache_expiration_days": {
                "default": 1,
                "description": "Number of days before cache objects expires"
              },
              "docker_machine_docker_cidr_blocks": {
                "default": [
                  "0.0.0.0/0"
                ],
                "description": "List of CIDR blocks to allow Docker Access to the docker machine runner instance"
              },
              "docker_machine_ssh_cidr_blocks": {
                "default": [
                  "0.0.0.0/0"
                ],
                "description": "List of CIDR blocks to allow SSH Access to the docker machine runner instance"
              },
              "enable_gitlab_runner_ssh_access": {
                "default": false,
                "description": "Enables SSH Access to the GitLab Runner instance"
              },
              "enable_runner_user_data_trace_log": {
                "default": false,
                "description": "Enable bash xtrace for the user data script that creates the EC2 instance for the runner agent. Be aware this could log sensitive data such as you GitLab runner token"
              },
              "gitlab_runner_registration_config": {
                "default": {
                  "access_level": "",
                  "description": "",
                  "locked_to_project": "",
                  "maximum_timeout": "",
                  "registration_token": "",
                  "run_untagged": ""
                },
                "description": "Configuration used to register the runner"
              },
              "gitlab_runner_ssh_cidr_blocks": {
                "default": [
                  "0.0.0.0/0"
                ],
                "description": "List of CIDR blocks to allow SSH Access to the GitLab Runner instance"
              },
              "key_name": {
                "default": "default",
                "description": "The name of the EC2 key pair to use"
              },
              "runners_concurrent": {
                "default": 10,
                "description": "Concurrent value for the runners, used in config.toml"
              },
              "runners_environment_vars": {
                "default": [],
                "description": "Environment variables during build execution as a list of strings like VAR1=value1, used in config.toml"
              },
              "runners_gitlab_url": {
                "description": "URL of the GitLab instance to connect to"
              },
              "runners_idle_count": {
                "default": 0,
                "description": "Idle count of the runners, used in config.toml"
              },
              "runners_idle_time": {
                "default": 600,
                "description": "Idle time of the runners, used in config.toml"
              },
              "runners_limit": {
                "default": 0,
                "description": "Limit for the runners, used in config.toml"
              },
              "runners_max_builds": {
                "default": 0,
                "description": "Max builds for each runner after which it will be removed, used in config.toml"
              },
              "runners_monitoring": {
                "default": false,
                "description": "Enable detailed CloudWatch monitoring for spot instances"
              },
              "runners_name": {
                "description": "Name of the runner, used in config.toml"
              },
              "runners_off_peak_idle_count": {
                "default": 0,
                "description": "Off peak idle count of the runners, used in config.toml"
              },
              "runners_off_peak_idle_time": {
                "default": 0,
                "description": "Off peak idle time of the runners, used in config.toml"
              },
              "runners_off_peak_periods": {
                "default": "",
                "description": "Off peak periods of the runners, used in config.toml"
              },
              "runners_off_peak_timezone": {
                "default": "Australia/Sydney",
                "description": "Off peak idle time zone of the runners, used in config.toml"
              },
              "runners_output_limit": {
                "default": 4096,
                "description": "Sets the maximum build log size in kilobytes, by default set to 4096 (4MB)"
              },
              "runners_request_concurrency": {
                "default": 1,
                "description": "Limit number of concurrent requests for new jobs from GitLab (default 1)"
              },
              "runners_root_size": {
                "default": 16,
                "description": "Runner instance root size in GB"
              },
              "runners_shm_size": {
                "default": 0,
                "description": "shm_size for the runners, used in config.toml"
              },
              "schedule_config": {
                "default": {
                  "scale_in_count": "0",
                  "scale_in_recurrence": "0 18 * * 1-5",
                  "scale_out_count": "1",
                  "scale_out_recurrence": "0 8 * * 1-5"
                },
                "description": "Map containing the configuration of the ASG scale-in and scale-up for the runner instance"
              },
              "subnet_id_runners": {
                "description": "Subnet used for hosting the GitLab runner"
              },
              "subnet_ids_gitlab_runner": {
                "description": "List of subnets used for hosting the GitLab runners"
              },
              "vpc_id": {
                "description": "The target VPC for the docker-machine and runner instances"
              }
            }
          }
        },
        "vpc": {
          "source": "terraform-aws-modules/vpc/aws",
          "expressions": {
            "azs": {
              "references": [
                "data.aws_availability_zones.available"
              ]
            },
            "cidr": {
              "constant_value": "10.0.0.0/16"
            },
            "enable_nat_gateway": {
              "constant_value": true
            },
            "enable_s3_endpoint": {
              "constant_value": true
            },
            "name": {
              "constant_value": "vpc-gitlab-runner"
            },
            "private_subnets": {
              "constant_value": [
                "10.0.1.0/24"
              ]
            },
            "public_subnets": {
              "constant_value": [
                "10.0.101.0/24"
              ]
            },
            "single_nat_gateway": {
              "constant_value": true
            }
          },
          "module": {
            "outputs": {
              "azs": {
                "expression": {
                  "references": [
                    "var.azs"
                  ]
                },
                "description": "A list of availability zones specified as argument to this module"
              },
              "database_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_network_acl.database"
                  ]
                },
                "description": "ID of the database network ACL"
              },
              "database_route_table_ids": {
                "expression": {
                  "references": [
                    "aws_route_table.database",
                    "aws_route_table.database",
                    "aws_route_table.private"
                  ]
                },
                "description": "List of IDs of database route tables"
              },
              "database_subnet_arns": {
                "expression": {
                  "references": [
                    "aws_subnet.database"
                  ]
                },
                "description": "List of ARNs of database subnets"
              },
              "database_subnet_group": {
                "expression": {
                  "references": [
                    "aws_db_subnet_group.database"
                  ]
                },
                "description": "ID of database subnet group"
              },
              "database_subnets": {
                "expression": {
                  "references": [
                    "aws_subnet.database"
                  ]
                },
                "description": "List of IDs of database subnets"
              },
              "database_subnets_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_subnet.database"
                  ]
                },
                "description": "List of cidr_blocks of database subnets"
              },
              "default_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The ID of the default network ACL"
              },
              "default_route_table_id": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The ID of the default route table"
              },
              "default_security_group_id": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The ID of the security group created by default on VPC creation"
              },
              "default_vpc_cidr_block": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "The CIDR block of the VPC"
              },
              "default_vpc_default_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "The ID of the default network ACL"
              },
              "default_vpc_default_route_table_id": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "The ID of the default route table"
              },
              "default_vpc_default_security_group_id": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "The ID of the security group created by default on VPC creation"
              },
              "default_vpc_enable_dns_hostnames": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "Whether or not the VPC has DNS hostname support"
              },
              "default_vpc_enable_dns_support": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "Whether or not the VPC has DNS support"
              },
              "default_vpc_id": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "The ID of the VPC"
              },
              "default_vpc_instance_tenancy": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "Tenancy of instances spin up within VPC"
              },
              "default_vpc_main_route_table_id": {
                "expression": {
                  "references": [
                    "aws_default_vpc.this"
                  ]
                },
                "description": "The ID of the main route table associated with this VPC"
              },
              "elasticache_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_network_acl.elasticache"
                  ]
                },
                "description": "ID of the elasticache network ACL"
              },
              "elasticache_route_table_ids": {
                "expression": {
                  "references": [
                    "aws_route_table.elasticache",
                    "aws_route_table.elasticache",
                    "aws_route_table.private"
                  ]
                },
                "description": "List of IDs of elasticache route tables"
              },
              "elasticache_subnet_arns": {
                "expression": {
                  "references": [
                    "aws_subnet.elasticache"
                  ]
                },
                "description": "List of ARNs of elasticache subnets"
              },
              "elasticache_subnet_group": {
                "expression": {
                  "references": [
                    "aws_elasticache_subnet_group.elasticache"
                  ]
                },
                "description": "ID of elasticache subnet group"
              },
              "elasticache_subnet_group_name": {
                "expression": {
                  "references": [
                    "aws_elasticache_subnet_group.elasticache"
                  ]
                },
                "description": "Name of elasticache subnet group"
              },
              "elasticache_subnets": {
                "expression": {
                  "references": [
                    "aws_subnet.elasticache"
                  ]
                },
                "description": "List of IDs of elasticache subnets"
              },
              "elasticache_subnets_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_subnet.elasticache"
                  ]
                },
                "description": "List of cidr_blocks of elasticache subnets"
              },
              "igw_id": {
                "expression": {
                  "references": [
                    "aws_internet_gateway.this"
                  ]
                },
                "description": "The ID of the Internet Gateway"
              },
              "intra_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_network_acl.intra"
                  ]
                },
                "description": "ID of the intra network ACL"
              },
              "intra_route_table_ids": {
                "expression": {
                  "references": [
                    "aws_route_table.intra"
                  ]
                },
                "description": "List of IDs of intra route tables"
              },
              "intra_subnet_arns": {
                "expression": {
                  "references": [
                    "aws_subnet.intra"
                  ]
                },
                "description": "List of ARNs of intra subnets"
              },
              "intra_subnets": {
                "expression": {
                  "references": [
                    "aws_subnet.intra"
                  ]
                },
                "description": "List of IDs of intra subnets"
              },
              "intra_subnets_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_subnet.intra"
                  ]
                },
                "description": "List of cidr_blocks of intra subnets"
              },
              "nat_ids": {
                "expression": {
                  "references": [
                    "aws_eip.nat"
                  ]
                },
                "description": "List of allocation ID of Elastic IPs created for AWS NAT Gateway"
              },
              "nat_public_ips": {
                "expression": {
                  "references": [
                    "aws_eip.nat"
                  ]
                },
                "description": "List of public Elastic IPs created for AWS NAT Gateway"
              },
              "natgw_ids": {
                "expression": {
                  "references": [
                    "aws_nat_gateway.this"
                  ]
                },
                "description": "List of NAT Gateway IDs"
              },
              "private_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_network_acl.private"
                  ]
                },
                "description": "ID of the private network ACL"
              },
              "private_route_table_ids": {
                "expression": {
                  "references": [
                    "aws_route_table.private"
                  ]
                },
                "description": "List of IDs of private route tables"
              },
              "private_subnet_arns": {
                "expression": {
                  "references": [
                    "aws_subnet.private"
                  ]
                },
                "description": "List of ARNs of private subnets"
              },
              "private_subnets": {
                "expression": {
                  "references": [
                    "aws_subnet.private"
                  ]
                },
                "description": "List of IDs of private subnets"
              },
              "private_subnets_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_subnet.private"
                  ]
                },
                "description": "List of cidr_blocks of private subnets"
              },
              "public_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_network_acl.public"
                  ]
                },
                "description": "ID of the public network ACL"
              },
              "public_route_table_ids": {
                "expression": {
                  "references": [
                    "aws_route_table.public"
                  ]
                },
                "description": "List of IDs of public route tables"
              },
              "public_subnet_arns": {
                "expression": {
                  "references": [
                    "aws_subnet.public"
                  ]
                },
                "description": "List of ARNs of public subnets"
              },
              "public_subnets": {
                "expression": {
                  "references": [
                    "aws_subnet.public"
                  ]
                },
                "description": "List of IDs of public subnets"
              },
              "public_subnets_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_subnet.public"
                  ]
                },
                "description": "List of cidr_blocks of public subnets"
              },
              "redshift_network_acl_id": {
                "expression": {
                  "references": [
                    "aws_network_acl.redshift"
                  ]
                },
                "description": "ID of the redshift network ACL"
              },
              "redshift_route_table_ids": {
                "expression": {
                  "references": [
                    "aws_route_table.redshift",
                    "aws_route_table.redshift",
                    "aws_route_table.private"
                  ]
                },
                "description": "List of IDs of redshift route tables"
              },
              "redshift_subnet_arns": {
                "expression": {
                  "references": [
                    "aws_subnet.redshift"
                  ]
                },
                "description": "List of ARNs of redshift subnets"
              },
              "redshift_subnet_group": {
                "expression": {
                  "references": [
                    "aws_redshift_subnet_group.redshift"
                  ]
                },
                "description": "ID of redshift subnet group"
              },
              "redshift_subnets": {
                "expression": {
                  "references": [
                    "aws_subnet.redshift"
                  ]
                },
                "description": "List of IDs of redshift subnets"
              },
              "redshift_subnets_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_subnet.redshift"
                  ]
                },
                "description": "List of cidr_blocks of redshift subnets"
              },
              "vgw_id": {
                "expression": {
                  "references": [
                    "aws_vpn_gateway.this",
                    "aws_vpn_gateway_attachment.this"
                  ]
                },
                "description": "The ID of the VPN Gateway"
              },
              "vpc_arn": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The ARN of the VPC"
              },
              "vpc_cidr_block": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The CIDR block of the VPC"
              },
              "vpc_enable_dns_hostnames": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "Whether or not the VPC has DNS hostname support"
              },
              "vpc_enable_dns_support": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "Whether or not the VPC has DNS support"
              },
              "vpc_endpoint_apigw_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.apigw"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for APIGW."
              },
              "vpc_endpoint_apigw_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.apigw"
                  ]
                },
                "description": "The ID of VPC endpoint for APIGW"
              },
              "vpc_endpoint_apigw_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.apigw"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for APIGW."
              },
              "vpc_endpoint_cloudtrail_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.cloudtrail"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for CloudTrail."
              },
              "vpc_endpoint_cloudtrail_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.cloudtrail"
                  ]
                },
                "description": "The ID of VPC endpoint for CloudTrail"
              },
              "vpc_endpoint_cloudtrail_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.cloudtrail"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for CloudTrail."
              },
              "vpc_endpoint_dynamodb_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.dynamodb"
                  ]
                },
                "description": "The ID of VPC endpoint for DynamoDB"
              },
              "vpc_endpoint_dynamodb_pl_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.dynamodb"
                  ]
                },
                "description": "The prefix list for the DynamoDB VPC endpoint."
              },
              "vpc_endpoint_ec2_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ec2"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for EC2."
              },
              "vpc_endpoint_ec2_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ec2"
                  ]
                },
                "description": "The ID of VPC endpoint for EC2"
              },
              "vpc_endpoint_ec2_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ec2"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for EC2"
              },
              "vpc_endpoint_ec2messages_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ec2messages"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for EC2MESSAGES."
              },
              "vpc_endpoint_ec2messages_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ec2messages"
                  ]
                },
                "description": "The ID of VPC endpoint for EC2MESSAGES"
              },
              "vpc_endpoint_ec2messages_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ec2messages"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for EC2MESSAGES"
              },
              "vpc_endpoint_ecr_api_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecr_api"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for ECR API."
              },
              "vpc_endpoint_ecr_api_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecr_api"
                  ]
                },
                "description": "The ID of VPC endpoint for ECR API"
              },
              "vpc_endpoint_ecr_api_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecr_api"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for ECR API."
              },
              "vpc_endpoint_ecr_dkr_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecr_dkr"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for ECR DKR."
              },
              "vpc_endpoint_ecr_dkr_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecr_dkr"
                  ]
                },
                "description": "The ID of VPC endpoint for ECR DKR"
              },
              "vpc_endpoint_ecr_dkr_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecr_dkr"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for ECR DKR."
              },
              "vpc_endpoint_ecs_agent_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs_agent"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for ECS Agent."
              },
              "vpc_endpoint_ecs_agent_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs_agent"
                  ]
                },
                "description": "The ID of VPC endpoint for ECS Agent"
              },
              "vpc_endpoint_ecs_agent_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs_agent"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for ECS Agent."
              },
              "vpc_endpoint_ecs_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for ECS."
              },
              "vpc_endpoint_ecs_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs"
                  ]
                },
                "description": "The ID of VPC endpoint for ECS"
              },
              "vpc_endpoint_ecs_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for ECS."
              },
              "vpc_endpoint_ecs_telemetry_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs_telemetry"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for ECS Telemetry."
              },
              "vpc_endpoint_ecs_telemetry_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs_telemetry"
                  ]
                },
                "description": "The ID of VPC endpoint for ECS Telemetry"
              },
              "vpc_endpoint_ecs_telemetry_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ecs_telemetry"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for ECS Telemetry."
              },
              "vpc_endpoint_elasticloadbalancing_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.elasticloadbalancing"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for Elastic Load Balancing."
              },
              "vpc_endpoint_elasticloadbalancing_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.elasticloadbalancing"
                  ]
                },
                "description": "The ID of VPC endpoint for Elastic Load Balancing"
              },
              "vpc_endpoint_elasticloadbalancing_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.elasticloadbalancing"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for Elastic Load Balancing."
              },
              "vpc_endpoint_events_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.events"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for CloudWatch Events."
              },
              "vpc_endpoint_events_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.events"
                  ]
                },
                "description": "The ID of VPC endpoint for CloudWatch Events"
              },
              "vpc_endpoint_events_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.events"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for CloudWatch Events."
              },
              "vpc_endpoint_kms_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.kms"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for KMS."
              },
              "vpc_endpoint_kms_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.kms"
                  ]
                },
                "description": "The ID of VPC endpoint for KMS"
              },
              "vpc_endpoint_kms_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.kms"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for KMS."
              },
              "vpc_endpoint_logs_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.logs"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for CloudWatch Logs."
              },
              "vpc_endpoint_logs_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.logs"
                  ]
                },
                "description": "The ID of VPC endpoint for CloudWatch Logs"
              },
              "vpc_endpoint_logs_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.logs"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for CloudWatch Logs."
              },
              "vpc_endpoint_monitoring_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.monitoring"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for CloudWatch Monitoring."
              },
              "vpc_endpoint_monitoring_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.monitoring"
                  ]
                },
                "description": "The ID of VPC endpoint for CloudWatch Monitoring"
              },
              "vpc_endpoint_monitoring_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.monitoring"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for CloudWatch Monitoring."
              },
              "vpc_endpoint_s3_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.s3"
                  ]
                },
                "description": "The ID of VPC endpoint for S3"
              },
              "vpc_endpoint_s3_pl_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.s3"
                  ]
                },
                "description": "The prefix list for the S3 VPC endpoint."
              },
              "vpc_endpoint_sns_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.sns"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for SNS."
              },
              "vpc_endpoint_sns_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.sns"
                  ]
                },
                "description": "The ID of VPC endpoint for SNS"
              },
              "vpc_endpoint_sns_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.sns"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for SNS."
              },
              "vpc_endpoint_sqs_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.sqs"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for SQS."
              },
              "vpc_endpoint_sqs_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.sqs"
                  ]
                },
                "description": "The ID of VPC endpoint for SQS"
              },
              "vpc_endpoint_sqs_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.sqs"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for SQS."
              },
              "vpc_endpoint_ssm_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ssm"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for SSM."
              },
              "vpc_endpoint_ssm_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ssm"
                  ]
                },
                "description": "The ID of VPC endpoint for SSM"
              },
              "vpc_endpoint_ssm_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ssm"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for SSM."
              },
              "vpc_endpoint_ssmmessages_dns_entry": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ssmmessages"
                  ]
                },
                "description": "The DNS entries for the VPC Endpoint for SSMMESSAGES."
              },
              "vpc_endpoint_ssmmessages_id": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ssmmessages"
                  ]
                },
                "description": "The ID of VPC endpoint for SSMMESSAGES"
              },
              "vpc_endpoint_ssmmessages_network_interface_ids": {
                "expression": {
                  "references": [
                    "aws_vpc_endpoint.ssmmessages"
                  ]
                },
                "description": "One or more network interfaces for the VPC Endpoint for SSMMESSAGES."
              },
              "vpc_id": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The ID of the VPC"
              },
              "vpc_instance_tenancy": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "Tenancy of instances spin up within VPC"
              },
              "vpc_main_route_table_id": {
                "expression": {
                  "references": [
                    "aws_vpc.this"
                  ]
                },
                "description": "The ID of the main route table associated with this VPC"
              },
              "vpc_secondary_cidr_blocks": {
                "expression": {
                  "references": [
                    "aws_vpc_ipv4_cidr_block_association.this"
                  ]
                },
                "description": "List of secondary CIDR blocks of the VPC"
              }
            },
            "resources": [
              {
                "address": "aws_db_subnet_group.database",
                "mode": "managed",
                "type": "aws_db_subnet_group",
                "name": "database",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.name"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.name"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.database"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.name",
                      "var.tags",
                      "var.database_subnet_group_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.database_subnets",
                    "var.create_database_subnet_group"
                  ]
                }
              },
              {
                "address": "aws_default_network_acl.this",
                "mode": "managed",
                "type": "aws_default_network_acl",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "default_network_acl_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.default_network_acl_name",
                      "var.tags",
                      "var.default_network_acl_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.manage_default_network_acl"
                  ]
                }
              },
              {
                "address": "aws_default_vpc.this",
                "mode": "managed",
                "type": "aws_default_vpc",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "enable_classiclink": {
                    "references": [
                      "var.default_vpc_enable_classiclink"
                    ]
                  },
                  "enable_dns_hostnames": {
                    "references": [
                      "var.default_vpc_enable_dns_hostnames"
                    ]
                  },
                  "enable_dns_support": {
                    "references": [
                      "var.default_vpc_enable_dns_support"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.default_vpc_name",
                      "var.tags",
                      "var.default_vpc_tags"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.manage_default_vpc"
                  ]
                }
              },
              {
                "address": "aws_eip.nat",
                "mode": "managed",
                "type": "aws_eip",
                "name": "nat",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.name",
                      "var.azs",
                      "var.single_nat_gateway",
                      "count.index",
                      "var.tags",
                      "var.nat_eip_tags"
                    ]
                  },
                  "vpc": {
                    "constant_value": true
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_nat_gateway",
                    "var.reuse_nat_ips",
                    "local.nat_gateway_count"
                  ]
                }
              },
              {
                "address": "aws_elasticache_subnet_group.elasticache",
                "mode": "managed",
                "type": "aws_elasticache_subnet_group",
                "name": "elasticache",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.name"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.name"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.elasticache"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.elasticache_subnets",
                    "var.create_elasticache_subnet_group"
                  ]
                }
              },
              {
                "address": "aws_internet_gateway.this",
                "mode": "managed",
                "type": "aws_internet_gateway",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.name",
                      "var.tags",
                      "var.igw_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_nat_gateway.this",
                "mode": "managed",
                "type": "aws_nat_gateway",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "allocation_id": {
                    "references": [
                      "local.nat_gateway_ips",
                      "var.single_nat_gateway",
                      "count.index"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.public",
                      "var.single_nat_gateway",
                      "count.index"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.name",
                      "var.azs",
                      "var.single_nat_gateway",
                      "count.index",
                      "var.tags",
                      "var.nat_gateway_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_nat_gateway",
                    "local.nat_gateway_count"
                  ]
                },
                "depends_on": [
                  "aws_internet_gateway.this"
                ]
              },
              {
                "address": "aws_network_acl.database",
                "mode": "managed",
                "type": "aws_network_acl",
                "name": "database",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.database"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.database_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.database_acl_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.database_dedicated_network_acl",
                    "var.database_subnets"
                  ]
                }
              },
              {
                "address": "aws_network_acl.elasticache",
                "mode": "managed",
                "type": "aws_network_acl",
                "name": "elasticache",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.elasticache"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.elasticache_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.elasticache_acl_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.elasticache_dedicated_network_acl",
                    "var.elasticache_subnets"
                  ]
                }
              },
              {
                "address": "aws_network_acl.intra",
                "mode": "managed",
                "type": "aws_network_acl",
                "name": "intra",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.intra"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.intra_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.intra_acl_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.intra_dedicated_network_acl",
                    "var.intra_subnets"
                  ]
                }
              },
              {
                "address": "aws_network_acl.private",
                "mode": "managed",
                "type": "aws_network_acl",
                "name": "private",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.private"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.private_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.private_acl_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.private_dedicated_network_acl",
                    "var.private_subnets"
                  ]
                }
              },
              {
                "address": "aws_network_acl.public",
                "mode": "managed",
                "type": "aws_network_acl",
                "name": "public",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.public"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.public_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.public_acl_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_dedicated_network_acl",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_network_acl.redshift",
                "mode": "managed",
                "type": "aws_network_acl",
                "name": "redshift",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.redshift"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.redshift_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.redshift_acl_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_dedicated_network_acl",
                    "var.redshift_subnets"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.database_inbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "database_inbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.database_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": false
                  },
                  "from_port": {
                    "references": [
                      "var.database_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.database[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.database_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.database_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.database_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.database_inbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.database_dedicated_network_acl",
                    "var.database_subnets",
                    "var.database_inbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.database_outbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "database_outbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.database_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": true
                  },
                  "from_port": {
                    "references": [
                      "var.database_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.database[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.database_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.database_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.database_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.database_outbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.database_dedicated_network_acl",
                    "var.database_subnets",
                    "var.database_outbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.elasticache_inbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "elasticache_inbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.elasticache_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": false
                  },
                  "from_port": {
                    "references": [
                      "var.elasticache_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.elasticache[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.elasticache_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.elasticache_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.elasticache_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.elasticache_inbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.elasticache_dedicated_network_acl",
                    "var.elasticache_subnets",
                    "var.elasticache_inbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.elasticache_outbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "elasticache_outbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.elasticache_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": true
                  },
                  "from_port": {
                    "references": [
                      "var.elasticache_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.elasticache[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.elasticache_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.elasticache_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.elasticache_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.elasticache_outbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.elasticache_dedicated_network_acl",
                    "var.elasticache_subnets",
                    "var.elasticache_outbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.intra_inbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "intra_inbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.intra_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": false
                  },
                  "from_port": {
                    "references": [
                      "var.intra_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.intra[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.intra_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.intra_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.intra_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.intra_inbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.intra_dedicated_network_acl",
                    "var.intra_subnets",
                    "var.intra_inbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.intra_outbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "intra_outbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.intra_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": true
                  },
                  "from_port": {
                    "references": [
                      "var.intra_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.intra[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.intra_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.intra_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.intra_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.intra_outbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.intra_dedicated_network_acl",
                    "var.intra_subnets",
                    "var.intra_outbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.private_inbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "private_inbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.private_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": false
                  },
                  "from_port": {
                    "references": [
                      "var.private_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.private[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.private_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.private_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.private_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.private_inbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.private_dedicated_network_acl",
                    "var.private_subnets",
                    "var.private_inbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.private_outbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "private_outbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.private_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": true
                  },
                  "from_port": {
                    "references": [
                      "var.private_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.private[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.private_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.private_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.private_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.private_outbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.private_dedicated_network_acl",
                    "var.private_subnets",
                    "var.private_outbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.public_inbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "public_inbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.public_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": false
                  },
                  "from_port": {
                    "references": [
                      "var.public_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.public[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.public_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.public_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.public_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.public_inbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_dedicated_network_acl",
                    "var.public_subnets",
                    "var.public_inbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.public_outbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "public_outbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.public_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": true
                  },
                  "from_port": {
                    "references": [
                      "var.public_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.public[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.public_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.public_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.public_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.public_outbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_dedicated_network_acl",
                    "var.public_subnets",
                    "var.public_outbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.redshift_inbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "redshift_inbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.redshift_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": false
                  },
                  "from_port": {
                    "references": [
                      "var.redshift_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.redshift[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.redshift_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.redshift_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.redshift_inbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.redshift_inbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_dedicated_network_acl",
                    "var.redshift_subnets",
                    "var.redshift_inbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_network_acl_rule.redshift_outbound",
                "mode": "managed",
                "type": "aws_network_acl_rule",
                "name": "redshift_outbound",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.redshift_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "egress": {
                    "constant_value": true
                  },
                  "from_port": {
                    "references": [
                      "var.redshift_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "network_acl_id": {
                    "references": [
                      "aws_network_acl.redshift[0]"
                    ]
                  },
                  "protocol": {
                    "references": [
                      "var.redshift_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_action": {
                    "references": [
                      "var.redshift_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "rule_number": {
                    "references": [
                      "var.redshift_outbound_acl_rules",
                      "count.index"
                    ]
                  },
                  "to_port": {
                    "references": [
                      "var.redshift_outbound_acl_rules",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_dedicated_network_acl",
                    "var.redshift_subnets",
                    "var.redshift_outbound_acl_rules"
                  ]
                }
              },
              {
                "address": "aws_redshift_subnet_group.redshift",
                "mode": "managed",
                "type": "aws_redshift_subnet_group",
                "name": "redshift",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "description": {
                    "references": [
                      "var.name"
                    ]
                  },
                  "name": {
                    "references": [
                      "var.name"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "aws_subnet.redshift"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.name",
                      "var.tags",
                      "var.redshift_subnet_group_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_subnets",
                    "var.create_redshift_subnet_group"
                  ]
                }
              },
              {
                "address": "aws_route.database_internet_gateway",
                "mode": "managed",
                "type": "aws_route",
                "name": "database_internet_gateway",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "destination_cidr_block": {
                    "constant_value": "0.0.0.0/0"
                  },
                  "gateway_id": {
                    "references": [
                      "aws_internet_gateway.this[0]"
                    ]
                  },
                  "route_table_id": {
                    "references": [
                      "aws_route_table.database[0]"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "constant_value": "5m"
                    }
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.create_database_subnet_route_table",
                    "var.database_subnets",
                    "var.create_database_internet_gateway_route",
                    "var.create_database_nat_gateway_route"
                  ]
                }
              },
              {
                "address": "aws_route.database_nat_gateway",
                "mode": "managed",
                "type": "aws_route",
                "name": "database_nat_gateway",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "destination_cidr_block": {
                    "constant_value": "0.0.0.0/0"
                  },
                  "nat_gateway_id": {
                    "references": [
                      "aws_nat_gateway.this",
                      "count.index"
                    ]
                  },
                  "route_table_id": {
                    "references": [
                      "aws_route_table.private",
                      "count.index"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "constant_value": "5m"
                    }
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.create_database_subnet_route_table",
                    "var.database_subnets",
                    "var.create_database_internet_gateway_route",
                    "var.create_database_nat_gateway_route",
                    "var.enable_nat_gateway",
                    "local.nat_gateway_count"
                  ]
                }
              },
              {
                "address": "aws_route.private_nat_gateway",
                "mode": "managed",
                "type": "aws_route",
                "name": "private_nat_gateway",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "destination_cidr_block": {
                    "constant_value": "0.0.0.0/0"
                  },
                  "nat_gateway_id": {
                    "references": [
                      "aws_nat_gateway.this",
                      "count.index"
                    ]
                  },
                  "route_table_id": {
                    "references": [
                      "aws_route_table.private",
                      "count.index"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "constant_value": "5m"
                    }
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_nat_gateway",
                    "local.nat_gateway_count"
                  ]
                }
              },
              {
                "address": "aws_route.public_internet_gateway",
                "mode": "managed",
                "type": "aws_route",
                "name": "public_internet_gateway",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "destination_cidr_block": {
                    "constant_value": "0.0.0.0/0"
                  },
                  "gateway_id": {
                    "references": [
                      "aws_internet_gateway.this[0]"
                    ]
                  },
                  "route_table_id": {
                    "references": [
                      "aws_route_table.public[0]"
                    ]
                  },
                  "timeouts": {
                    "create": {
                      "constant_value": "5m"
                    }
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table.database",
                "mode": "managed",
                "type": "aws_route_table",
                "name": "database",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.database_route_table_tags",
                      "var.name",
                      "var.database_subnet_suffix"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.create_database_subnet_route_table",
                    "var.database_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table.elasticache",
                "mode": "managed",
                "type": "aws_route_table",
                "name": "elasticache",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.elasticache_route_table_tags",
                      "var.name",
                      "var.elasticache_subnet_suffix"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.create_elasticache_subnet_route_table",
                    "var.elasticache_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table.intra",
                "mode": "managed",
                "type": "aws_route_table",
                "name": "intra",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.name",
                      "var.intra_subnet_suffix",
                      "var.tags",
                      "var.intra_route_table_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.intra_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table.private",
                "mode": "managed",
                "type": "aws_route_table",
                "name": "private",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.single_nat_gateway",
                      "var.name",
                      "var.private_subnet_suffix",
                      "var.private_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.private_route_table_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "local.max_subnet_length",
                    "local.nat_gateway_count"
                  ]
                }
              },
              {
                "address": "aws_route_table.public",
                "mode": "managed",
                "type": "aws_route_table",
                "name": "public",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.public_subnet_suffix",
                      "var.name",
                      "var.tags",
                      "var.public_route_table_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table.redshift",
                "mode": "managed",
                "type": "aws_route_table",
                "name": "redshift",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "tags": {
                    "references": [
                      "var.tags",
                      "var.redshift_route_table_tags",
                      "var.name",
                      "var.redshift_subnet_suffix"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.create_redshift_subnet_route_table",
                    "var.redshift_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.database",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "database",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.database",
                      "aws_route_table.private",
                      "var.single_nat_gateway",
                      "var.create_database_subnet_route_table",
                      "count.index"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.database",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.database_subnets",
                    "var.database_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.elasticache",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "elasticache",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.elasticache",
                      "aws_route_table.private",
                      "var.single_nat_gateway",
                      "var.create_elasticache_subnet_route_table",
                      "count.index"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.elasticache",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.elasticache_subnets",
                    "var.elasticache_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.intra",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "intra",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.intra"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.intra",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.intra_subnets",
                    "var.intra_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.private",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "private",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.private",
                      "var.single_nat_gateway",
                      "count.index"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.private",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.private_subnets",
                    "var.private_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.public",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "public",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.public[0]"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.public",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_subnets",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.redshift",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "redshift",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.redshift",
                      "aws_route_table.private",
                      "var.single_nat_gateway",
                      "var.create_redshift_subnet_route_table",
                      "count.index"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.redshift",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_subnets",
                    "var.enable_public_redshift",
                    "var.redshift_subnets"
                  ]
                }
              },
              {
                "address": "aws_route_table_association.redshift_public",
                "mode": "managed",
                "type": "aws_route_table_association",
                "name": "redshift_public",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.redshift",
                      "aws_route_table.public",
                      "var.single_nat_gateway",
                      "var.create_redshift_subnet_route_table",
                      "count.index"
                    ]
                  },
                  "subnet_id": {
                    "references": [
                      "aws_subnet.redshift",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_subnets",
                    "var.enable_public_redshift",
                    "var.redshift_subnets"
                  ]
                }
              },
              {
                "address": "aws_subnet.database",
                "mode": "managed",
                "type": "aws_subnet",
                "name": "database",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "availability_zone": {
                    "references": [
                      "var.azs",
                      "count.index"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.database_subnets",
                      "count.index"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.database_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.database_subnet_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.database_subnets",
                    "var.database_subnets"
                  ]
                }
              },
              {
                "address": "aws_subnet.elasticache",
                "mode": "managed",
                "type": "aws_subnet",
                "name": "elasticache",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "availability_zone": {
                    "references": [
                      "var.azs",
                      "count.index"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.elasticache_subnets",
                      "count.index"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.elasticache_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.elasticache_subnet_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.elasticache_subnets",
                    "var.elasticache_subnets"
                  ]
                }
              },
              {
                "address": "aws_subnet.intra",
                "mode": "managed",
                "type": "aws_subnet",
                "name": "intra",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "availability_zone": {
                    "references": [
                      "var.azs",
                      "count.index"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.intra_subnets",
                      "count.index"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.intra_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.intra_subnet_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.intra_subnets",
                    "var.intra_subnets"
                  ]
                }
              },
              {
                "address": "aws_subnet.private",
                "mode": "managed",
                "type": "aws_subnet",
                "name": "private",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "availability_zone": {
                    "references": [
                      "var.azs",
                      "count.index"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.private_subnets",
                      "count.index"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.private_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.private_subnet_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.private_subnets",
                    "var.private_subnets"
                  ]
                }
              },
              {
                "address": "aws_subnet.public",
                "mode": "managed",
                "type": "aws_subnet",
                "name": "public",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "availability_zone": {
                    "references": [
                      "var.azs",
                      "count.index"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.public_subnets",
                      "count.index"
                    ]
                  },
                  "map_public_ip_on_launch": {
                    "references": [
                      "var.map_public_ip_on_launch"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.public_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.public_subnet_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.public_subnets",
                    "var.one_nat_gateway_per_az",
                    "var.public_subnets",
                    "var.azs",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_subnet.redshift",
                "mode": "managed",
                "type": "aws_subnet",
                "name": "redshift",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "availability_zone": {
                    "references": [
                      "var.azs",
                      "count.index"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.redshift_subnets",
                      "count.index"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.redshift_subnet_suffix",
                      "var.name",
                      "var.azs",
                      "count.index",
                      "var.tags",
                      "var.redshift_subnet_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.redshift_subnets",
                    "var.redshift_subnets"
                  ]
                }
              },
              {
                "address": "aws_vpc.this",
                "mode": "managed",
                "type": "aws_vpc",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "assign_generated_ipv6_cidr_block": {
                    "references": [
                      "var.assign_generated_ipv6_cidr_block"
                    ]
                  },
                  "cidr_block": {
                    "references": [
                      "var.cidr"
                    ]
                  },
                  "enable_dns_hostnames": {
                    "references": [
                      "var.enable_dns_hostnames"
                    ]
                  },
                  "enable_dns_support": {
                    "references": [
                      "var.enable_dns_support"
                    ]
                  },
                  "instance_tenancy": {
                    "references": [
                      "var.instance_tenancy"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.name",
                      "var.tags",
                      "var.vpc_tags"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "var.create_vpc"
                  ]
                }
              },
              {
                "address": "aws_vpc_dhcp_options.this",
                "mode": "managed",
                "type": "aws_vpc_dhcp_options",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "domain_name": {
                    "references": [
                      "var.dhcp_options_domain_name"
                    ]
                  },
                  "domain_name_servers": {
                    "references": [
                      "var.dhcp_options_domain_name_servers"
                    ]
                  },
                  "netbios_name_servers": {
                    "references": [
                      "var.dhcp_options_netbios_name_servers"
                    ]
                  },
                  "netbios_node_type": {
                    "references": [
                      "var.dhcp_options_netbios_node_type"
                    ]
                  },
                  "ntp_servers": {
                    "references": [
                      "var.dhcp_options_ntp_servers"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.name",
                      "var.tags",
                      "var.dhcp_options_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dhcp_options"
                  ]
                }
              },
              {
                "address": "aws_vpc_dhcp_options_association.this",
                "mode": "managed",
                "type": "aws_vpc_dhcp_options_association",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "dhcp_options_id": {
                    "references": [
                      "aws_vpc_dhcp_options.this[0]"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dhcp_options"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.apigw",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "apigw",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.apigw_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.apigw_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.apigw[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.apigw_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_apigw_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.cloudtrail",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "cloudtrail",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.cloudtrail_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.cloudtrail_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.cloudtrail[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.cloudtrail_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_cloudtrail_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.dynamodb",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "dynamodb",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.dynamodb[0]"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dynamodb_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ec2",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ec2",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ec2_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ec2_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ec2[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ec2_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ec2_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ec2messages",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ec2messages",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ec2messages_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ec2messages_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ec2messages[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ec2messages_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ec2messages_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ecr_api",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ecr_api",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ecr_api_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ecr_api_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ecr_api[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ecr_api_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecr_api_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ecr_dkr",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ecr_dkr",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ecr_dkr_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ecr_dkr_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ecr_dkr[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ecr_dkr_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecr_dkr_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ecs",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ecs",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ecs_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ecs_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ecs[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ecs_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecs_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ecs_agent",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ecs_agent",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ecs_agent_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ecs_agent_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ecs_agent[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ecs_agent_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecs_agent_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ecs_telemetry",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ecs_telemetry",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ecs_telemetry_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ecs_telemetry_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ecs_telemetry[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ecs_telemetry_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecs_telemetry_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.elasticloadbalancing",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "elasticloadbalancing",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.elasticloadbalancing_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.elasticloadbalancing_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.elasticloadbalancing[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.elasticloadbalancing_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_elasticloadbalancing_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.events",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "events",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.events_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.events_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.events[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.events_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_events_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.kms",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "kms",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.kms_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.kms_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.kms[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.kms_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_kms_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.logs",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "logs",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.logs_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.logs_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.logs[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.logs_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_logs_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.monitoring",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "monitoring",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.monitoring_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.monitoring_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.monitoring[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.monitoring_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_monitoring_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.s3",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "s3",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.s3[0]"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_s3_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.sns",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "sns",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.sns_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.sns_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.sns[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.sns_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_sns_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.sqs",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "sqs",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.sqs_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.sqs_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.sqs[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.sqs_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_sqs_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ssm",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ssm",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ssm_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ssm_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ssm[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ssm_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ssm_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint.ssmmessages",
                "mode": "managed",
                "type": "aws_vpc_endpoint",
                "name": "ssmmessages",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "private_dns_enabled": {
                    "references": [
                      "var.ssmmessages_endpoint_private_dns_enabled"
                    ]
                  },
                  "security_group_ids": {
                    "references": [
                      "var.ssmmessages_endpoint_security_group_ids"
                    ]
                  },
                  "service_name": {
                    "references": [
                      "data.aws_vpc_endpoint_service.ssmmessages[0]"
                    ]
                  },
                  "subnet_ids": {
                    "references": [
                      "var.ssmmessages_endpoint_subnet_ids",
                      "aws_subnet.private"
                    ]
                  },
                  "vpc_endpoint_type": {
                    "constant_value": "Interface"
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ssmmessages_endpoint"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint_route_table_association.intra_dynamodb",
                "mode": "managed",
                "type": "aws_vpc_endpoint_route_table_association",
                "name": "intra_dynamodb",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.intra"
                    ]
                  },
                  "vpc_endpoint_id": {
                    "references": [
                      "aws_vpc_endpoint.dynamodb[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dynamodb_endpoint",
                    "var.intra_subnets"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint_route_table_association.intra_s3",
                "mode": "managed",
                "type": "aws_vpc_endpoint_route_table_association",
                "name": "intra_s3",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.intra"
                    ]
                  },
                  "vpc_endpoint_id": {
                    "references": [
                      "aws_vpc_endpoint.s3[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_s3_endpoint",
                    "var.intra_subnets"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint_route_table_association.private_dynamodb",
                "mode": "managed",
                "type": "aws_vpc_endpoint_route_table_association",
                "name": "private_dynamodb",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.private",
                      "count.index"
                    ]
                  },
                  "vpc_endpoint_id": {
                    "references": [
                      "aws_vpc_endpoint.dynamodb[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dynamodb_endpoint",
                    "local.nat_gateway_count"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint_route_table_association.private_s3",
                "mode": "managed",
                "type": "aws_vpc_endpoint_route_table_association",
                "name": "private_s3",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.private",
                      "count.index"
                    ]
                  },
                  "vpc_endpoint_id": {
                    "references": [
                      "aws_vpc_endpoint.s3[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_s3_endpoint",
                    "local.nat_gateway_count"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint_route_table_association.public_dynamodb",
                "mode": "managed",
                "type": "aws_vpc_endpoint_route_table_association",
                "name": "public_dynamodb",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.public[0]"
                    ]
                  },
                  "vpc_endpoint_id": {
                    "references": [
                      "aws_vpc_endpoint.dynamodb[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dynamodb_endpoint",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_vpc_endpoint_route_table_association.public_s3",
                "mode": "managed",
                "type": "aws_vpc_endpoint_route_table_association",
                "name": "public_s3",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.public[0]"
                    ]
                  },
                  "vpc_endpoint_id": {
                    "references": [
                      "aws_vpc_endpoint.s3[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_s3_endpoint",
                    "var.public_subnets"
                  ]
                }
              },
              {
                "address": "aws_vpc_ipv4_cidr_block_association.this",
                "mode": "managed",
                "type": "aws_vpc_ipv4_cidr_block_association",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "cidr_block": {
                    "references": [
                      "var.secondary_cidr_blocks",
                      "count.index"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "aws_vpc.this[0]"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.secondary_cidr_blocks",
                    "var.secondary_cidr_blocks"
                  ]
                }
              },
              {
                "address": "aws_vpn_gateway.this",
                "mode": "managed",
                "type": "aws_vpn_gateway",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "amazon_side_asn": {
                    "references": [
                      "var.amazon_side_asn"
                    ]
                  },
                  "tags": {
                    "references": [
                      "var.name",
                      "var.tags",
                      "var.vpn_gateway_tags"
                    ]
                  },
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_vpn_gateway"
                  ]
                }
              },
              {
                "address": "aws_vpn_gateway_attachment.this",
                "mode": "managed",
                "type": "aws_vpn_gateway_attachment",
                "name": "this",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "vpc_id": {
                    "references": [
                      "local.vpc_id"
                    ]
                  },
                  "vpn_gateway_id": {
                    "references": [
                      "var.vpn_gateway_id"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.vpn_gateway_id"
                  ]
                }
              },
              {
                "address": "aws_vpn_gateway_route_propagation.private",
                "mode": "managed",
                "type": "aws_vpn_gateway_route_propagation",
                "name": "private",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.private",
                      "count.index"
                    ]
                  },
                  "vpn_gateway_id": {
                    "references": [
                      "aws_vpn_gateway.this",
                      "aws_vpn_gateway_attachment.this",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.propagate_private_route_tables_vgw",
                    "var.enable_vpn_gateway",
                    "var.vpn_gateway_id",
                    "var.private_subnets"
                  ]
                }
              },
              {
                "address": "aws_vpn_gateway_route_propagation.public",
                "mode": "managed",
                "type": "aws_vpn_gateway_route_propagation",
                "name": "public",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "route_table_id": {
                    "references": [
                      "aws_route_table.public",
                      "count.index"
                    ]
                  },
                  "vpn_gateway_id": {
                    "references": [
                      "aws_vpn_gateway.this",
                      "aws_vpn_gateway_attachment.this",
                      "count.index"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.propagate_public_route_tables_vgw",
                    "var.enable_vpn_gateway",
                    "var.vpn_gateway_id"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.apigw",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "apigw",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "execute-api"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_apigw_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.cloudtrail",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "cloudtrail",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "cloudtrail"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_cloudtrail_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.dynamodb",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "dynamodb",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "dynamodb"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_dynamodb_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ec2",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ec2",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ec2"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ec2_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ec2messages",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ec2messages",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ec2messages"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ec2messages_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ecr_api",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ecr_api",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ecr.api"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecr_api_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ecr_dkr",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ecr_dkr",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ecr.dkr"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecr_dkr_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ecs",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ecs",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ecs"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecs_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ecs_agent",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ecs_agent",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ecs-agent"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecs_agent_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ecs_telemetry",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ecs_telemetry",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ecs-telemetry"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ecs_telemetry_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.elasticloadbalancing",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "elasticloadbalancing",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "elasticloadbalancing"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_elasticloadbalancing_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.events",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "events",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "events"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_events_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.kms",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "kms",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "kms"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_kms_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.logs",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "logs",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "logs"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_logs_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.monitoring",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "monitoring",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "monitoring"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_monitoring_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.s3",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "s3",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "s3"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_s3_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.sns",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "sns",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "sns"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_sns_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.sqs",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "sqs",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "sqs"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_sqs_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ssm",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ssm",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ssm"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ssm_endpoint"
                  ]
                }
              },
              {
                "address": "data.aws_vpc_endpoint_service.ssmmessages",
                "mode": "data",
                "type": "aws_vpc_endpoint_service",
                "name": "ssmmessages",
                "provider_config_key": "vpc:aws",
                "expressions": {
                  "service": {
                    "constant_value": "ssmmessages"
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "var.create_vpc",
                    "var.enable_ssmmessages_endpoint"
                  ]
                }
              }
            ],
            "variables": {
              "amazon_side_asn": {
                "default": "64512",
                "description": "The Autonomous System Number (ASN) for the Amazon side of the gateway. By default the virtual private gateway is created with the current default Amazon ASN."
              },
              "apigw_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for API GW endpoint"
              },
              "apigw_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for API GW  endpoint"
              },
              "apigw_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for API GW endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "assign_generated_ipv6_cidr_block": {
                "default": false,
                "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block"
              },
              "azs": {
                "default": [],
                "description": "A list of availability zones in the region"
              },
              "cidr": {
                "default": "0.0.0.0/0",
                "description": "The CIDR block for the VPC. Default value is a valid CIDR, but not acceptable by AWS and should be overridden"
              },
              "cloudtrail_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudTrail endpoint"
              },
              "cloudtrail_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for CloudTrail endpoint"
              },
              "cloudtrail_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for CloudTrail endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "create_database_internet_gateway_route": {
                "default": false,
                "description": "Controls if an internet gateway route for public database access should be created"
              },
              "create_database_nat_gateway_route": {
                "default": false,
                "description": "Controls if a nat gateway route should be created to give internet access to the database subnets"
              },
              "create_database_subnet_group": {
                "default": true,
                "description": "Controls if database subnet group should be created"
              },
              "create_database_subnet_route_table": {
                "default": false,
                "description": "Controls if separate route table for database should be created"
              },
              "create_elasticache_subnet_group": {
                "default": true,
                "description": "Controls if elasticache subnet group should be created"
              },
              "create_elasticache_subnet_route_table": {
                "default": false,
                "description": "Controls if separate route table for elasticache should be created"
              },
              "create_redshift_subnet_group": {
                "default": true,
                "description": "Controls if redshift subnet group should be created"
              },
              "create_redshift_subnet_route_table": {
                "default": false,
                "description": "Controls if separate route table for redshift should be created"
              },
              "create_vpc": {
                "default": true,
                "description": "Controls if VPC should be created (it affects almost all resources)"
              },
              "database_acl_tags": {
                "default": {},
                "description": "Additional tags for the database subnets network ACL"
              },
              "database_dedicated_network_acl": {
                "default": false,
                "description": "Whether to use dedicated network ACL (not default) and custom rules for database subnets"
              },
              "database_inbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Database subnets inbound network ACL rules"
              },
              "database_outbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Database subnets outbound network ACL rules"
              },
              "database_route_table_tags": {
                "default": {},
                "description": "Additional tags for the database route tables"
              },
              "database_subnet_group_tags": {
                "default": {},
                "description": "Additional tags for the database subnet group"
              },
              "database_subnet_suffix": {
                "default": "db",
                "description": "Suffix to append to database subnets name"
              },
              "database_subnet_tags": {
                "default": {},
                "description": "Additional tags for the database subnets"
              },
              "database_subnets": {
                "default": [],
                "description": "A list of database subnets"
              },
              "default_network_acl_egress": {
                "default": [
                  {
                    "action": "allow",
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_no": "100",
                    "to_port": "0"
                  },
                  {
                    "action": "allow",
                    "from_port": "0",
                    "ipv6_cidr_block": "::/0",
                    "protocol": "-1",
                    "rule_no": "101",
                    "to_port": "0"
                  }
                ],
                "description": "List of maps of egress rules to set on the Default Network ACL"
              },
              "default_network_acl_ingress": {
                "default": [
                  {
                    "action": "allow",
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_no": "100",
                    "to_port": "0"
                  },
                  {
                    "action": "allow",
                    "from_port": "0",
                    "ipv6_cidr_block": "::/0",
                    "protocol": "-1",
                    "rule_no": "101",
                    "to_port": "0"
                  }
                ],
                "description": "List of maps of ingress rules to set on the Default Network ACL"
              },
              "default_network_acl_name": {
                "default": "",
                "description": "Name to be used on the Default Network ACL"
              },
              "default_network_acl_tags": {
                "default": {},
                "description": "Additional tags for the Default Network ACL"
              },
              "default_vpc_enable_classiclink": {
                "default": false,
                "description": "Should be true to enable ClassicLink in the Default VPC"
              },
              "default_vpc_enable_dns_hostnames": {
                "default": false,
                "description": "Should be true to enable DNS hostnames in the Default VPC"
              },
              "default_vpc_enable_dns_support": {
                "default": true,
                "description": "Should be true to enable DNS support in the Default VPC"
              },
              "default_vpc_name": {
                "default": "",
                "description": "Name to be used on the Default VPC"
              },
              "default_vpc_tags": {
                "default": {},
                "description": "Additional tags for the Default VPC"
              },
              "dhcp_options_domain_name": {
                "default": "",
                "description": "Specifies DNS name for DHCP options set (requires enable_dhcp_options set to true)"
              },
              "dhcp_options_domain_name_servers": {
                "default": [
                  "AmazonProvidedDNS"
                ],
                "description": "Specify a list of DNS server addresses for DHCP options set, default to AWS provided (requires enable_dhcp_options set to true)"
              },
              "dhcp_options_netbios_name_servers": {
                "default": [],
                "description": "Specify a list of netbios servers for DHCP options set (requires enable_dhcp_options set to true)"
              },
              "dhcp_options_netbios_node_type": {
                "default": "",
                "description": "Specify netbios node_type for DHCP options set (requires enable_dhcp_options set to true)"
              },
              "dhcp_options_ntp_servers": {
                "default": [],
                "description": "Specify a list of NTP servers for DHCP options set (requires enable_dhcp_options set to true)"
              },
              "dhcp_options_tags": {
                "default": {},
                "description": "Additional tags for the DHCP option set (requires enable_dhcp_options set to true)"
              },
              "ec2_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2 endpoint"
              },
              "ec2_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for EC2 endpoint"
              },
              "ec2_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for EC2 endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "ec2messages_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for EC2MESSAGES endpoint"
              },
              "ec2messages_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for EC2MESSAGES endpoint"
              },
              "ec2messages_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for EC2MESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "ecr_api_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for ECR API endpoint"
              },
              "ecr_api_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for ECR API endpoint"
              },
              "ecr_api_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for ECR api endpoint. If omitted, private subnets will be used."
              },
              "ecr_dkr_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for ECR DKR endpoint"
              },
              "ecr_dkr_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for ECR DKR endpoint"
              },
              "ecr_dkr_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for ECR dkr endpoint. If omitted, private subnets will be used."
              },
              "ecs_agent_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Agent endpoint"
              },
              "ecs_agent_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for ECS Agent endpoint"
              },
              "ecs_agent_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for ECS Agent endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "ecs_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS endpoint"
              },
              "ecs_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for ECS endpoint"
              },
              "ecs_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for ECS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "ecs_telemetry_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for ECS Telemetry endpoint"
              },
              "ecs_telemetry_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for ECS Telemetry endpoint"
              },
              "ecs_telemetry_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for ECS Telemetry endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "elasticache_acl_tags": {
                "default": {},
                "description": "Additional tags for the elasticache subnets network ACL"
              },
              "elasticache_dedicated_network_acl": {
                "default": false,
                "description": "Whether to use dedicated network ACL (not default) and custom rules for elasticache subnets"
              },
              "elasticache_inbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Elasticache subnets inbound network ACL rules"
              },
              "elasticache_outbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Elasticache subnets outbound network ACL rules"
              },
              "elasticache_route_table_tags": {
                "default": {},
                "description": "Additional tags for the elasticache route tables"
              },
              "elasticache_subnet_suffix": {
                "default": "elasticache",
                "description": "Suffix to append to elasticache subnets name"
              },
              "elasticache_subnet_tags": {
                "default": {},
                "description": "Additional tags for the elasticache subnets"
              },
              "elasticache_subnets": {
                "default": [],
                "description": "A list of elasticache subnets"
              },
              "elasticloadbalancing_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for Elastic Load Balancing endpoint"
              },
              "elasticloadbalancing_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for Elastic Load Balancing endpoint"
              },
              "elasticloadbalancing_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for Elastic Load Balancing endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "enable_apigw_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an api gateway endpoint to the VPC"
              },
              "enable_cloudtrail_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a CloudTrail endpoint to the VPC"
              },
              "enable_dhcp_options": {
                "default": false,
                "description": "Should be true if you want to specify a DHCP options set with a custom domain name, DNS servers, NTP servers, netbios servers, and/or netbios server type"
              },
              "enable_dns_hostnames": {
                "default": false,
                "description": "Should be true to enable DNS hostnames in the VPC"
              },
              "enable_dns_support": {
                "default": true,
                "description": "Should be true to enable DNS support in the VPC"
              },
              "enable_dynamodb_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a DynamoDB endpoint to the VPC"
              },
              "enable_ec2_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an EC2 endpoint to the VPC"
              },
              "enable_ec2messages_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an EC2MESSAGES endpoint to the VPC"
              },
              "enable_ecr_api_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an ecr api endpoint to the VPC"
              },
              "enable_ecr_dkr_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an ecr dkr endpoint to the VPC"
              },
              "enable_ecs_agent_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a ECS Agent endpoint to the VPC"
              },
              "enable_ecs_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a ECS endpoint to the VPC"
              },
              "enable_ecs_telemetry_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a ECS Telemetry endpoint to the VPC"
              },
              "enable_elasticloadbalancing_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a Elastic Load Balancing endpoint to the VPC"
              },
              "enable_events_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a CloudWatch Events endpoint to the VPC"
              },
              "enable_kms_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a KMS endpoint to the VPC"
              },
              "enable_logs_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a CloudWatch Logs endpoint to the VPC"
              },
              "enable_monitoring_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a CloudWatch Monitoring endpoint to the VPC"
              },
              "enable_nat_gateway": {
                "default": false,
                "description": "Should be true if you want to provision NAT Gateways for each of your private networks"
              },
              "enable_public_redshift": {
                "default": false,
                "description": "Controls if redshift should have public routing table"
              },
              "enable_s3_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an S3 endpoint to the VPC"
              },
              "enable_sns_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a SNS endpoint to the VPC"
              },
              "enable_sqs_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an SQS endpoint to the VPC"
              },
              "enable_ssm_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision an SSM endpoint to the VPC"
              },
              "enable_ssmmessages_endpoint": {
                "default": false,
                "description": "Should be true if you want to provision a SSMMESSAGES endpoint to the VPC"
              },
              "enable_vpn_gateway": {
                "default": false,
                "description": "Should be true if you want to create a new VPN Gateway resource and attach it to the VPC"
              },
              "events_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Events endpoint"
              },
              "events_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Events endpoint"
              },
              "events_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Events endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "external_nat_ip_ids": {
                "default": [],
                "description": "List of EIP IDs to be assigned to the NAT Gateways (used in combination with reuse_nat_ips)"
              },
              "igw_tags": {
                "default": {},
                "description": "Additional tags for the internet gateway"
              },
              "instance_tenancy": {
                "default": "default",
                "description": "A tenancy option for instances launched into the VPC"
              },
              "intra_acl_tags": {
                "default": {},
                "description": "Additional tags for the intra subnets network ACL"
              },
              "intra_dedicated_network_acl": {
                "default": false,
                "description": "Whether to use dedicated network ACL (not default) and custom rules for intra subnets"
              },
              "intra_inbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Intra subnets inbound network ACLs"
              },
              "intra_outbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Intra subnets outbound network ACLs"
              },
              "intra_route_table_tags": {
                "default": {},
                "description": "Additional tags for the intra route tables"
              },
              "intra_subnet_suffix": {
                "default": "intra",
                "description": "Suffix to append to intra subnets name"
              },
              "intra_subnet_tags": {
                "default": {},
                "description": "Additional tags for the intra subnets"
              },
              "intra_subnets": {
                "default": [],
                "description": "A list of intra subnets"
              },
              "kms_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for KMS endpoint"
              },
              "kms_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for KMS endpoint"
              },
              "kms_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for KMS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "logs_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Logs endpoint"
              },
              "logs_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Logs endpoint"
              },
              "logs_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Logs endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "manage_default_network_acl": {
                "default": false,
                "description": "Should be true to adopt and manage Default Network ACL"
              },
              "manage_default_vpc": {
                "default": false,
                "description": "Should be true to adopt and manage Default VPC"
              },
              "map_public_ip_on_launch": {
                "default": true,
                "description": "Should be false if you do not want to auto-assign public IP on launch"
              },
              "monitoring_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for CloudWatch Monitoring endpoint"
              },
              "monitoring_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for CloudWatch Monitoring endpoint"
              },
              "monitoring_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for CloudWatch Monitoring endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "name": {
                "default": "",
                "description": "Name to be used on all the resources as identifier"
              },
              "nat_eip_tags": {
                "default": {},
                "description": "Additional tags for the NAT EIP"
              },
              "nat_gateway_tags": {
                "default": {},
                "description": "Additional tags for the NAT gateways"
              },
              "one_nat_gateway_per_az": {
                "default": false,
                "description": "Should be true if you want only one NAT Gateway per availability zone. Requires `var.azs` to be set, and the number of `public_subnets` created to be greater than or equal to the number of availability zones specified in `var.azs`."
              },
              "private_acl_tags": {
                "default": {},
                "description": "Additional tags for the private subnets network ACL"
              },
              "private_dedicated_network_acl": {
                "default": false,
                "description": "Whether to use dedicated network ACL (not default) and custom rules for private subnets"
              },
              "private_inbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Private subnets inbound network ACLs"
              },
              "private_outbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Private subnets outbound network ACLs"
              },
              "private_route_table_tags": {
                "default": {},
                "description": "Additional tags for the private route tables"
              },
              "private_subnet_suffix": {
                "default": "private",
                "description": "Suffix to append to private subnets name"
              },
              "private_subnet_tags": {
                "default": {},
                "description": "Additional tags for the private subnets"
              },
              "private_subnets": {
                "default": [],
                "description": "A list of private subnets inside the VPC"
              },
              "propagate_private_route_tables_vgw": {
                "default": false,
                "description": "Should be true if you want route table propagation"
              },
              "propagate_public_route_tables_vgw": {
                "default": false,
                "description": "Should be true if you want route table propagation"
              },
              "public_acl_tags": {
                "default": {},
                "description": "Additional tags for the public subnets network ACL"
              },
              "public_dedicated_network_acl": {
                "default": false,
                "description": "Whether to use dedicated network ACL (not default) and custom rules for public subnets"
              },
              "public_inbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Public subnets inbound network ACLs"
              },
              "public_outbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Public subnets outbound network ACLs"
              },
              "public_route_table_tags": {
                "default": {},
                "description": "Additional tags for the public route tables"
              },
              "public_subnet_suffix": {
                "default": "public",
                "description": "Suffix to append to public subnets name"
              },
              "public_subnet_tags": {
                "default": {},
                "description": "Additional tags for the public subnets"
              },
              "public_subnets": {
                "default": [],
                "description": "A list of public subnets inside the VPC"
              },
              "redshift_acl_tags": {
                "default": {},
                "description": "Additional tags for the redshift subnets network ACL"
              },
              "redshift_dedicated_network_acl": {
                "default": false,
                "description": "Whether to use dedicated network ACL (not default) and custom rules for redshift subnets"
              },
              "redshift_inbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Redshift subnets inbound network ACL rules"
              },
              "redshift_outbound_acl_rules": {
                "default": [
                  {
                    "cidr_block": "0.0.0.0/0",
                    "from_port": "0",
                    "protocol": "-1",
                    "rule_action": "allow",
                    "rule_number": "100",
                    "to_port": "0"
                  }
                ],
                "description": "Redshift subnets outbound network ACL rules"
              },
              "redshift_route_table_tags": {
                "default": {},
                "description": "Additional tags for the redshift route tables"
              },
              "redshift_subnet_group_tags": {
                "default": {},
                "description": "Additional tags for the redshift subnet group"
              },
              "redshift_subnet_suffix": {
                "default": "redshift",
                "description": "Suffix to append to redshift subnets name"
              },
              "redshift_subnet_tags": {
                "default": {},
                "description": "Additional tags for the redshift subnets"
              },
              "redshift_subnets": {
                "default": [],
                "description": "A list of redshift subnets"
              },
              "reuse_nat_ips": {
                "default": false,
                "description": "Should be true if you don't want EIPs to be created for your NAT Gateways and will instead pass them in via the 'external_nat_ip_ids' variable"
              },
              "secondary_cidr_blocks": {
                "default": [],
                "description": "List of secondary CIDR blocks to associate with the VPC to extend the IP Address pool"
              },
              "single_nat_gateway": {
                "default": false,
                "description": "Should be true if you want to provision a single shared NAT Gateway across all of your private networks"
              },
              "sns_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for SNS endpoint"
              },
              "sns_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for SNS endpoint"
              },
              "sns_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for SNS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "sqs_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for SQS endpoint"
              },
              "sqs_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for SQS endpoint"
              },
              "sqs_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for SQS endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "ssm_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for SSM endpoint"
              },
              "ssm_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for SSM endpoint"
              },
              "ssm_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for SSM endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "ssmmessages_endpoint_private_dns_enabled": {
                "default": false,
                "description": "Whether or not to associate a private hosted zone with the specified VPC for SSMMESSAGES endpoint"
              },
              "ssmmessages_endpoint_security_group_ids": {
                "default": [],
                "description": "The ID of one or more security groups to associate with the network interface for SSMMESSAGES endpoint"
              },
              "ssmmessages_endpoint_subnet_ids": {
                "default": [],
                "description": "The ID of one or more subnets in which to create a network interface for SSMMESSAGES endpoint. Only a single subnet within an AZ is supported. If omitted, private subnets will be used."
              },
              "tags": {
                "default": {},
                "description": "A map of tags to add to all resources"
              },
              "vpc_tags": {
                "default": {},
                "description": "Additional tags for the VPC"
              },
              "vpn_gateway_id": {
                "default": "",
                "description": "ID of VPN Gateway to attach to the VPC"
              },
              "vpn_gateway_tags": {
                "default": {},
                "description": "Additional tags for the VPN gateway"
              }
            }
          },
          "version_constraint": "2.5"
        }
      },
      "variables": {
        "bucket_name": {
          "default": "config-bucket-1c5a1978-d138-4084-a3b4-fd4c403a89a0"
        },
        "enable_gitlab_runner_ssh_access": {},
        "registration_token": {}
      }
    }
  }
}
